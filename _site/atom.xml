<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>Daniel Chia</title>
 <link href="http://danielcodes.github.io/atom.xml" rel="self"/>
 <link href="http://danielcodes.github.io/"/>
 <updated>2017-02-25T01:33:12-05:00</updated>
 <id>http://danielcodes.github.io</id>
 <author>
   <name>Daniel Chia</name>
   <email>danielarmandochia@gmail.com</email>
 </author>

 
 <entry>
   <title>Building a Simon game</title>
   <link href="http://danielcodes.github.io/2017/02/25/simon-game/"/>
   <updated>2017-02-25T00:00:00-05:00</updated>
   <id>http://danielcodes.github.io/2017/02/25/simon-game</id>
   <content type="html">&lt;p&gt;After finishing the Tic Tac Toe game, I set out to finish the last Front End project from Free Code Camp, a &lt;a href=&quot;https://www.freecodecamp.com/challenges/build-a-simon-game&quot;&gt;Simon Game&lt;/a&gt;. The game consists of 4 buttons, from which a sequence will play. The player’s job is to match that sequence. If you do, the sequence grows, otherwise it plays the same sequence until you pass the current level. Straight forward rules, but I really had no clue how to implement this. The first couple of sessions, I mainly sat down to think about the structure of the game as it had many parts. A little later on, I came up with my first task, which was creating a &lt;code&gt;div&lt;/code&gt; that blinked when it was clicked.&lt;/p&gt;

&lt;h2 id=&quot;first-task---blinking-div&quot;&gt;First task - Blinking div&lt;/h2&gt;

&lt;p&gt;This took much longer to finish than I had liked. Mainly because when I first saw the &lt;a href=&quot;https://facebook.github.io/react/docs/animation.html&quot;&gt;documentation&lt;/a&gt; on the main site regarding animation, I felt a bit overwhelmed. A lot of it seemed pretty abstract and I didn’t have the energy to trudge through all of it. After some digging, I found this neat &lt;a href=&quot;http://unitstep.net/blog/2015/03/03/using-react-animations-to-transition-between-ui-states/&quot;&gt;little tutorial&lt;/a&gt;. It had just what I needed, a blinking &lt;code&gt;div&lt;/code&gt;. Although this article should have been enough to get things going, things didn’t quite click with me as I was still confused about certain areas, specially the CSS bits with &lt;code&gt;enter&lt;/code&gt;, &lt;code&gt;leave&lt;/code&gt; and their active states and so I searched a bit further. I came across this &lt;a href=&quot;https://medium.com/@joethedave/achieving-ui-animations-with-react-the-right-way-562fa8a91935#.q6ofquo9i&quot;&gt;last article&lt;/a&gt; that really put everything into perspective. This included a link to the first thing I should’ve looked at, the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Transitions/Using_CSS_transitions&quot;&gt;animation docs&lt;/a&gt; on MDN.&lt;/p&gt;

&lt;p&gt;If somebody was to start this project, I’d recommend reading the animations docs, followed by the medium article and lastly the tutorial about the blink. Knowing about how transitions work fundamentally will help you grasp the concept, no matter how other APIs are trying to bend things.&lt;/p&gt;

&lt;p&gt;I don’t have an example to show as, after finishing the blink, I did not save a copy and built the rest of the project on top of it. But there is a a link &lt;a href=&quot;http://jsfiddle.net/pchng/17rq3s6d/1/&quot;&gt;here&lt;/a&gt;, which is more or less what I ended up with.&lt;/p&gt;

&lt;p&gt;The main takeaway here is that React handles transitions inside its &lt;code&gt;ReactCSSTransitions&lt;/code&gt; component. You label elements with a &lt;code&gt;key&lt;/code&gt; value and animations will occur when elements with these keys enter or leave the component. The animation was achieved by keeping an array of booleans, and everytime a click occurred this value was toggled, creating a &lt;em&gt;enter or leave&lt;/em&gt; effect activating the blink.&lt;/p&gt;

&lt;p&gt;Ok, that was task one.&lt;/p&gt;

&lt;h2 id=&quot;second-task---playing-a-sequence-of-blinks&quot;&gt;Second task - Playing a sequence of blinks&lt;/h2&gt;

&lt;p&gt;Now, the next step was animating a sequence of blinks. The first thing I tried was this&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;for(var i=0; i&amp;lt;seq.length; i++){
	// component.toggleValues(i)
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When I ran this code, the only blink that played was the last one. This happens because each blink call is overriding the other, not letting the first one finish and thus only the last one plays.
I was stumped on this for a while, mainly because I was looking in the wrong place to solve a simple timing problem. I was looking at React-motion, a React library for animation. This seemed a bit of an overkill, considering that all I wanted was a sequence of blinks and I already had the blink. But curious to see if this would solve my problem, I decided to dive in. I read this lengthy &lt;a href=&quot;https://medium.com/@nashvail/a-gentle-introduction-to-react-motion-dc50dd9f2459#.s367bigir&quot;&gt;article&lt;/a&gt;, which built a menu that popped out from a button. As interesting as the topic was, I didn’t need 90% of it. However, I did find the answer to my problem at the end of the article where there was a bit of information on creating the delay for the icons to pop up sequentially. Not a waste of time afterall.&lt;/p&gt;

&lt;p&gt;The Javascript that I was missing was this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// prints 1, 2, 3, 4, 5 in a timely manner
for(var i=1; i&amp;lt;=5; i++){
  setTimeout(function(i){
    return function(){
      console.log(&#39;printing, &#39;, i);
    }
  }(i), i*1000) // immediately executes by calling it with fn(i)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;setTimout&lt;/code&gt; function is used if you want to execute something after an &lt;strong&gt;x&lt;/strong&gt; amount of time. Now, the function benig passed to &lt;code&gt;setTimeout&lt;/code&gt; is returning a function. This is a common JS problem where if we didn’t have this, the values of &lt;code&gt;i&lt;/code&gt; would not freeze and the values printed would all be 6. So to get around it, we pass a function that is executed right away, this returns a function that has each unique &lt;code&gt;i&lt;/code&gt; value.&lt;/p&gt;

&lt;p&gt;And this was exactly was I needed to perform my sequence of blinks, mainly just replacing the print statement with the bit of code that activated the blink.&lt;/p&gt;

&lt;p&gt;From this point on, it was quite simple to develop the game further. I was able to add a level up, after the user entered a correct sequence and reset the level on bad input. But, I wasn’t done. The sequence could play and all, but the user had an infinite amount of time to enter the correct sequence. What’s the fun if you aren’t being timed? That brought me to my third task, a timer.&lt;/p&gt;

&lt;h2 id=&quot;third-task---creating-a-timer-for-the-user&quot;&gt;Third task - Creating a timer for the user&lt;/h2&gt;

&lt;p&gt;Although I had implemented a timer before for the previous project, a &lt;a href=&quot;http://codepen.io/danielcodes/full/GNQLGX/&quot;&gt;Pomodoro clock&lt;/a&gt;. When it came time to implement it again, I delayed it for as long as possible. Mainly because when I had put that code together, I didn’t plan on looking back at it, funny how things turn out. It was time to look at that mess.&lt;/p&gt;

&lt;p&gt;From looking over the code, the timer was implemented in this manner:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function getRemainingTime(endtime){
  var t = Date.parse(endtime) - Date.parse(new Date());
  var seconds = Math.floor((t/1000) % 60);
  var minutes = Math.floor((t/1000/60) % 60);
  
  return {
    &#39;total&#39;: t,
    &#39;minutes&#39;: minutes,
    &#39;seconds&#39;: seconds   
  }
}

var endtime = new Date();
endtime.setSeconds(endtime.getSeconds() + 10);

var timer = setInterval(function(){
  var t = getRemainingTime(endtime);
  console.log(&#39;counting &#39;, t.total, t.minutes, t.seconds);
  
  if(t.total == 0){
    console.log(&#39;Finished counting&#39;);
    clearInterval(timer);
  }
}, 1000);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The way this works is by first creating a &lt;code&gt;deadline&lt;/code&gt; (ie. 10 seconds from now). The next bit that runs is our &lt;code&gt;setInterval&lt;/code&gt;, what this does is run the function inside for an &lt;strong&gt;x&lt;/strong&gt; delay which in this case is set to 1000 ms. So here there will be an initial delay before our function executes, by then &lt;code&gt;t&lt;/code&gt; will start counting down from 9. And this function will be called over and over until our timer is exhausted down to 0, which is when it’ll stop.
This bit of code is taken from &lt;a href=&quot;https://www.sitepoint.com/build-javascript-countdown-timer-no-dependencies/&quot;&gt;here&lt;/a&gt;, so I highly suggest you take a look as it does a much better job at explaining timers than I do.&lt;/p&gt;

&lt;p&gt;After re-reading and understanding this timer mechanism, I proceeded to add this to the game.&lt;/p&gt;

&lt;p&gt;The flow of the game now was:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Play sequence, following it start a timer that awaits user input&lt;/li&gt;
  &lt;li&gt;If timer runs out, replay the the step above&lt;/li&gt;
  &lt;li&gt;The other &lt;strong&gt;two cases&lt;/strong&gt; that affect timer are on level up, where a new step is added to the sequence and then we go back to &lt;strong&gt;step 1&lt;/strong&gt; and on wrong input where we go straight back to &lt;strong&gt;step 1&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;While doing this, I discovered I needed to disable the ability to click the blinks at several steps, otherwise there are some craaazy bugs. Race conditions and what not, very ugly stuff. The disables were placed on three places, during sequence animation, after wrong input and after level up. This was done by setting the CSS property of &lt;code&gt;pointer-events&lt;/code&gt; to &lt;code&gt;none&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Almost there, the fourth step was adding sound to the clicks.&lt;/p&gt;

&lt;h2 id=&quot;fourth-task---adding-the-sound&quot;&gt;Fourth task - Adding the sound&lt;/h2&gt;

&lt;p&gt;Several sounds were given to add to each blinker. Given that they were links, naturally my thought was that I needed to use &lt;code&gt;AJAX&lt;/code&gt; to retrieve the sounds first, store them and play them when needed. And so, I set off to learn how to do AJAX calls in React. I read &lt;a href=&quot;http://andrewhfarmer.com/react-ajax-best-practices/&quot;&gt;this article&lt;/a&gt; and &lt;a href=&quot;https://daveceddia.com/ajax-requests-in-react/&quot;&gt;this one&lt;/a&gt; too. At the end, I decided to go with &lt;code&gt;axios&lt;/code&gt; as it had an example. But this failed, as I was not able to retrieve the sound data, but it did work for regular JSON format data. This was annoying.&lt;/p&gt;

&lt;p&gt;I remember going home frustrated that day, having my progress halted by a stupid AJAX call. However, the next day I managed to figure it out. The answer came from this &lt;a href=&quot;http://stackoverflow.com/questions/9419263/playing-audio-with-javascript&quot;&gt;StackOverflow question&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// JS code to load and play audio
var audio = new Audio(&#39;audio_file.mp3&#39;);
audio.play();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It turns out that I could just place the source of the mp3 file and the &lt;code&gt;Audio API&lt;/code&gt; would do all the heavy lifting for me. Pretty sweet solution considering the frustration the day prior.&lt;/p&gt;

&lt;p&gt;And with this, most of the logic of my game was done. Here’s what I had after this point:&lt;/p&gt;

&lt;p data-height=&quot;341&quot; data-theme-id=&quot;0&quot; data-slug-hash=&quot;KaMBEm&quot; data-default-tab=&quot;result&quot; data-user=&quot;danielcodes&quot; data-embed-version=&quot;2&quot; data-pen-title=&quot;working simon game&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;http://codepen.io/danielcodes/pen/KaMBEm/&quot;&gt;working simon game&lt;/a&gt; by Daniel Chia (&lt;a href=&quot;http://codepen.io/danielcodes&quot;&gt;@danielcodes&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://production-assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;

&lt;h2 id=&quot;fifth-task---polishing-the-user-interface&quot;&gt;Fifth task - Polishing the User Interface&lt;/h2&gt;

&lt;p&gt;This is always the most dreaded task, ha. In this case, what I needed to do was straight forward. First create the quarters, then create the set of controls and finally wire up everything. Creating the quarters was something new, and was able to do it thanks to &lt;a href=&quot;http://jsfiddle.net/cardeo/8ku6T/&quot;&gt;this JS Fiddle&lt;/a&gt;. The circular control board was a bit more tedious to do as every little aspect of it required custom sizing. This ended up being alot of ID tagging and a lot of repetitive CSS, especially centering, I’ve become really good at centering text and blocks.&lt;/p&gt;

&lt;p&gt;This is the final product:&lt;/p&gt;

&lt;p data-height=&quot;416&quot; data-theme-id=&quot;0&quot; data-slug-hash=&quot;xgrpbw&quot; data-default-tab=&quot;result&quot; data-user=&quot;danielcodes&quot; data-embed-version=&quot;2&quot; data-pen-title=&quot;Simon game&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;http://codepen.io/danielcodes/pen/xgrpbw/&quot;&gt;Simon game&lt;/a&gt; by Daniel Chia (&lt;a href=&quot;http://codepen.io/danielcodes&quot;&gt;@danielcodes&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://production-assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;One of the reasons, why it is a bit oversized is that when I was developing this on my CodePen, I had my browser size set to 75%. I set it up this way because I can see about 10 more lines of code on the editor. I done goofed, but overall it isn’t too bad :).&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;This last Free Code Camp project was one of the toughest for sure. Highly due to the research aspect of it, not knowing how to do many things and oftentimes getting stuck trying to find the answer. But I’m glad that I decided to stick with things and eventually finishing it up. :)&lt;/p&gt;

&lt;p&gt;PS. Here is the &lt;a href=&quot;http://codepen.io/danielcodes/full/xgrpbw/&quot;&gt;full page version&lt;/a&gt;&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Building a Tic Tac Toe game</title>
   <link href="http://danielcodes.github.io/2016/12/30/tic-tac-toe/"/>
   <updated>2016-12-30T00:00:00-05:00</updated>
   <id>http://danielcodes.github.io/2016/12/30/tic-tac-toe</id>
   <content type="html">&lt;p&gt;In the past two weeks, I have been working on a Tic Tac Toe game for Free Code Camp. This one took a couple of sittings as it required me to learn quite a few things. I chose to use React for the project as it is something that I’ve been meaning to learn for the longest time and had some momentum coming in after finishing my Pomodoro Clock in React.&lt;/p&gt;

&lt;p&gt;The user stories for the project were simple:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;I can play a game of Tic Tac Toe with the computer.&lt;/li&gt;
  &lt;li&gt;My game will reset as soon as it’s over so I can play again.&lt;/li&gt;
  &lt;li&gt;I can choose whether I want to play as X or O.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Not too bad, have a choice between X or O, create an AI and reset when the game ends.&lt;/p&gt;

&lt;h2 id=&quot;starting-out&quot;&gt;Starting out&lt;/h2&gt;

&lt;p&gt;The first thing I did was prototype the user interface, which was just a grid. After this, I soon found that I had put together a huge component and didn’t know how to break it up. Also, if I had kept that grid component, each square would need to have an &lt;code&gt;onClick&lt;/code&gt; handle attached to it to display X or O on that square. So soon and things were already starting to look ugly. I needed to break down this HTML. Luckily, I happened to come across the tutorial on &lt;a href=&quot;https://facebook.github.io/react/tutorial/tutorial.html&quot;&gt;React’s main site&lt;/a&gt;, which was a Tic-Tac-Toe game.&lt;/p&gt;

&lt;h2 id=&quot;going-through-the-tutorial&quot;&gt;Going through the tutorial&lt;/h2&gt;

&lt;p&gt;This tutorial was a lot of fun, I highly recommend it. I found the main thing that I needed, which was to break the components apart. They did this by creating several components such as a Game, a Board and a Square. You start small with all the functionality contained in the Square and refactor up. This means the parent component contains the data and passes a function down to the child for it to modify this data. This was the only thing I needed, but there were other goodies in the tutorial, such as creating a history of all the moves and being able to move back and start playing from there.&lt;/p&gt;

&lt;p&gt;After finishing the tutorial, there were additional features that you could implement if you wanted to test your knowledge. Since I wanted to learn, I did them.&lt;/p&gt;

&lt;p data-height=&quot;306&quot; data-theme-id=&quot;0&quot; data-slug-hash=&quot;LbBMyK&quot; data-default-tab=&quot;result&quot; data-user=&quot;danielcodes&quot; data-embed-version=&quot;2&quot; data-pen-title=&quot;Tic Tac Toe new features&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;http://codepen.io/danielcodes/pen/LbBMyK/&quot;&gt;Tic Tac Toe new features&lt;/a&gt; by Daniel Chia (&lt;a href=&quot;http://codepen.io/danielcodes&quot;&gt;@danielcodes&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://production-assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;The most noticeable additions are, bolding the current move, the button to sort the moves and highlighting the winning line.&lt;/p&gt;

&lt;h2 id=&quot;back-to-my-prototype&quot;&gt;Back to my prototype&lt;/h2&gt;

&lt;p&gt;Armed with this new knowledge, I proceeded to add these separated components to my own game. At this point, I thought that I was ready to start looking into creating the AI to play the game.&lt;/p&gt;

&lt;h2 id=&quot;thinking-about-the-ai&quot;&gt;Thinking about the AI&lt;/h2&gt;

&lt;p&gt;The first idea that came to mind to create this AI, was to have the computer capture the center or corner on its first move. From here, look for threats which is when the opposite player has two pieces lined up. A couple of limitations with this approach:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Here, there&#39;s no threat right away, but if it play its move on either of the T spots, it is going to lose.

 |T|O
-----
 |X|T
-----
X| |
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is when I realized that I couldn’t really come up with a few simple checks to solve this problem.
After some research, I found that there was an algorithm that I could specifically use for these kind of turn taking games, &lt;strong&gt;Minimax&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&quot;minimax&quot;&gt;Minimax&lt;/h2&gt;

&lt;p&gt;I got to understand this algorithm from two main sources:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://neverstopbuilding.com/minimax&quot;&gt;Article&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=CwziaVrM_vc&quot;&gt;Video&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The article explains in depth how Minimax works, and the second is a video that actually implements the algorithm, done in &lt;code&gt;C++&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;back-to-my-project&quot;&gt;Back to my project&lt;/h2&gt;

&lt;p&gt;However, even though I understood the concept, I had a bit of trouble getting started on writing the algorithm. The main roadblock was that I needed to extend my two player version to one where I played against the computer. So I went and created a dumb AI that placed a move anywhere on the board. Now, the goal was clear, I just needed to update this one function so it used Minimax to pick the best move instead of the dumb AI.&lt;/p&gt;

&lt;h2 id=&quot;understanding-minimax&quot;&gt;Understanding Minimax&lt;/h2&gt;

&lt;p&gt;Essentially, Minimax is a brute-force algorithm that explores every possible option. It does this by playing out all scenarios and giving each square a score. The score can be of 3 kinds, &lt;strong&gt;positive for a win, 0 for a draw and negative for a loss&lt;/strong&gt;. At the end, you pick the highest score and play that move.&lt;/p&gt;

&lt;p&gt;I won’t go into much detail as to how the recursion works, as the two sources above can do a much better job at explaining.&lt;/p&gt;

&lt;p&gt;But, I do want to mention a small optimization that I made to the algorithm. Since Minimax is a brute force algorithm, it is really slow. When I first wrote the function, it took a good 30 seconds to finish computing on an empty board, and this was running locally on node. No doubt this was gonna crash my browser.&lt;/p&gt;

&lt;p&gt;To see this, think about the tree,&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;First choice,                  (9 options)
                            |         | | | | | | | | 
Second choice,         (8 options)      ...
                     |        | | | | | | | 
Third choice,   (7 options)             ...     
                  |     | | | | | | 
		...       ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If the computer runs the algorithm from the beginning, it first has 9 options and each one of these expand into a tree that each have 8 options each, subsequently these 8 nodes each expand into 7 trees of their own. Try to draw it, to get a feel for the sheer magnitude of the tree.&lt;/p&gt;

&lt;h2 id=&quot;first-move-doesnt-help&quot;&gt;First move doesn’t help&lt;/h2&gt;

&lt;p&gt;Running the algorithm on an empty board returns a score of &lt;strong&gt;0 for each of the squares&lt;/strong&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; | |    | |X    | |X
-----  -----   -----
 | |    | |     |O|
-----  -----   -----
 | |    | |     | |
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Say the AI plays a corner, it then runs the algorithm and finds that the center is the only safe move so it plays that and eventually brings the game to a draw. It does this for each of the other 9 squares. No matter where the first move is placed, the second player can always tie the game. Thus, the zero scores for all 9 squares.&lt;/p&gt;

&lt;h2 id=&quot;optimizing-minimax&quot;&gt;Optimizing Minimax&lt;/h2&gt;

&lt;p&gt;As explained, the first computation is completely unnecessary as there’s no go-to move that will guarantee a win and as explained it is very expensive. And so to save some computation time, I optimized for the first and second move, if the AI has the first move, it either plays it in one of the corners or the center. Given the first move, you can actually play anywhere and tie all the time but if you play a corner or the center and the opponent (you) goof up, you’ll end up losing. As for the second move, I made it so that it captures either the center or a corner if the center is taken since these two spots will prevent the other from winning.&lt;/p&gt;

&lt;p&gt;Getting the first or second move fast makes the tree start from the node with 7 options. Thankfully, the browser seemed to be able to handle this computation just fine.&lt;/p&gt;

&lt;h2 id=&quot;putting-it-all-together&quot;&gt;Putting it all together&lt;/h2&gt;

&lt;p&gt;After creating this function, I just had to add it to my component. This was easy enough to do.&lt;/p&gt;

&lt;p data-height=&quot;553&quot; data-theme-id=&quot;0&quot; data-slug-hash=&quot;MbVXLv&quot; data-default-tab=&quot;result&quot; data-user=&quot;danielcodes&quot; data-embed-version=&quot;2&quot; data-pen-title=&quot;Tic Tac Toe&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;http://codepen.io/danielcodes/pen/MbVXLv/&quot;&gt;Tic Tac Toe&lt;/a&gt; by Daniel Chia (&lt;a href=&quot;http://codepen.io/danielcodes&quot;&gt;@danielcodes&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://production-assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;This was the end result, now the final step was to style it up.&lt;/p&gt;

&lt;h2 id=&quot;final-touches&quot;&gt;Final touches&lt;/h2&gt;

&lt;p&gt;Phew, most of the logic had been wrapped up at this point, now the task was to make it appealing to users.
Right from the get-go I thought of using a modal to first prompt the user for input, select an icon (X or O) and who goes first. Then, start the game and reset back to the modal when the game finished.&lt;/p&gt;

&lt;p&gt;But I had no idea how to implement this modal. Thankfully, I found this &lt;a href=&quot;https://daveceddia.com/open-modal-in-react/&quot;&gt;tutorial&lt;/a&gt;, that had just what I needed.
After adding some color, and rewiring things here and there, this was the end result.&lt;/p&gt;

&lt;p data-height=&quot;573&quot; data-theme-id=&quot;0&quot; data-slug-hash=&quot;qqzbyd&quot; data-default-tab=&quot;result&quot; data-user=&quot;danielcodes&quot; data-embed-version=&quot;2&quot; data-pen-title=&quot;Tic Tac Toe&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;http://codepen.io/danielcodes/pen/qqzbyd/&quot;&gt;Tic Tac Toe&lt;/a&gt; by Daniel Chia (&lt;a href=&quot;http://codepen.io/danielcodes&quot;&gt;@danielcodes&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://production-assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;It was a fun project overall. It definitely tested my patience, from not knowing how to break down the big grid, having to learn about a new algorithm and creating the user interface. It was a great reminder that projects take time and that small victories count as the final product is always worth seeing.&lt;/p&gt;

&lt;p&gt;And that’s a wrap :)&lt;/p&gt;

&lt;p&gt;PS. Since this was done in a CodePen, I ended up with 400 lines of JS. Time to move this locally and give the project some structure.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Sudoku bug</title>
   <link href="http://danielcodes.github.io/2016/11/21/sudoku-bug/"/>
   <updated>2016-11-21T00:00:00-05:00</updated>
   <id>http://danielcodes.github.io/2016/11/21/sudoku-bug</id>
   <content type="html">&lt;p&gt;The other day I was trying to implement a Sudoku Solver, specifically the one from Elements of Programming Interviews. My usual approach to these type of problems has been to write down the sudo code on paper, step through it and if I understand it, I can usually implement it without looking at the solution. This was certainly the case with this Sudoku Solver, except that I missed a crucial keyword in the program that created a bug that sent everything spiraling out of control.&lt;/p&gt;

&lt;h3 id=&quot;pseudo-code&quot;&gt;Pseudo-code&lt;/h3&gt;

&lt;p&gt;First, let me explain how this Sudoku Solver is supposed to work on a step-by-step basis.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Iterate through each slot in the grid&lt;/li&gt;
  &lt;li&gt;Two base cases
    &lt;ul&gt;
      &lt;li&gt;The grid has been filled both horizontally and vertically&lt;/li&gt;
      &lt;li&gt;The slot already has a value&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;If it doesn’t fall into the two categories above, the program proceeds to attempt all values from 1-9&lt;/li&gt;
  &lt;li&gt;If the value is valid, set the value and recurse, if this recursion passes, return True&lt;/li&gt;
  &lt;li&gt;If the loop above terminates, undo the assignment (backtrack) and return False&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;One thing to note is that this solves the puzzle in a vertical manner, filling in the columns and moving towards the right.&lt;/p&gt;

&lt;p&gt;The code to this can be found &lt;a href=&quot;https://github.com/danielcodes/practice-problems/blob/master/epi/16-recursion/sudokuSolver.py&quot;&gt;here&lt;/a&gt;. Take a glance at it since I’ll be discussing it in the snippets below.&lt;/p&gt;

&lt;h3 id=&quot;where-it-all-went-wrong&quot;&gt;Where it all went wrong&lt;/h3&gt;

&lt;p&gt;This looks implementation doesn’t look too bad. However, I ran into a pretty nasty bug. On the case base case where the slot already has a value, I wrote:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;# recurse onto the next row
if grid[i][j] != 0:
    sudokuSolverHelper(i+1, j, grid)	
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&quot;so-whats-wrong-with-this&quot;&gt;So, what’s wrong with this?&lt;/h5&gt;

&lt;p&gt;The problem lies when this call gets returned, say it recurses down to the next value and all values from 1-9 are not valid. This returns &lt;code&gt;False&lt;/code&gt; but the rest of the code continues to execute. This means that the code then attempts to try to use all values from 1-9 on this already filled-in value. No bueno.&lt;/p&gt;

&lt;h3 id=&quot;the-solution&quot;&gt;The solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;# add return prior to the recursion
if grid[i][j] != 0:
    return sudokuSolverHelper(i+1, j, grid)	
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It’s hard to see how this helps right away, so let’s run through an example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;_ empty
5 pre-filled 5
_ empty
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Say the first empty value is a 2, it recurses and goes to 5 which hits our&lt;/p&gt;

&lt;p&gt;&lt;code&gt;return rec(...)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;case, now we’re at the second empty slot, then say after attempting all values on the second empty slot, False is returned. But now since we have the return statement, the code below it will not run and this same False value will be given to the recursive step when 2 was the attempted value.&lt;/p&gt;

&lt;h3 id=&quot;in-short&quot;&gt;In short&lt;/h3&gt;

&lt;p&gt;That missing &lt;code&gt;return&lt;/code&gt; caused the pre-filled values to be overwritten, adding it prevents it.&lt;/p&gt;

&lt;p&gt;PS. Copy the code and go to &lt;a href=&quot;https://repl.it/languages/python&quot;&gt;repl.it&lt;/a&gt; and try it out, adding and removing the return keyword&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>GUI setup madness</title>
   <link href="http://danielcodes.github.io/2016/05/09/gui-setup-madness/"/>
   <updated>2016-05-09T00:00:00-04:00</updated>
   <id>http://danielcodes.github.io/2016/05/09/gui-setup-madness</id>
   <content type="html">&lt;h2 id=&quot;update-051116&quot;&gt;Update 05/11/16&lt;/h2&gt;

&lt;p&gt;I attempted to a last ditch effort to get this running, and it worked.&lt;/p&gt;

&lt;p&gt;It was mostly thanks to these two posts,&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;https://groups.google.com/forum/#!topic/ppp-public/BtlzdWGuQpQ&lt;/li&gt;
  &lt;li&gt;http://stackoverflow.com/questions/31924162/stroustrups-header-error-working-with-fltk&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With the FLTK package installed, I created a new directory with the sample program and dumped all the headers from &lt;code&gt;GUI/&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This was followed by,&lt;/p&gt;

&lt;p&gt;```sh
# replace PROGRAM_NAME with your C++ file&lt;/p&gt;

&lt;p&gt;g++ -w -Wall -std=c++11 Graph.cpp Window.cpp GUI.cpp Simple_window.cpp PROGRAM_NAME.cpp -L/usr/local/lib -lfltk_images -lpng -lz -ljpeg -lfltk -lXcursor -lXfixes -lXext -lXft -lfontconfig -lXinerama -lpthread -ldl -lm -lX11 -o PROGRAM_NAME
```&lt;/p&gt;

&lt;p&gt;On first run, it did not work due to some inability to convert ifstream to bool as a return value, this was fixed with&lt;/p&gt;

&lt;p&gt;&lt;code&gt;return (bool)ifstrean_value&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;No need to set up Eclipse, thank goodness.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;This weekend I spent a solid day trying to configure my computer to run FLTK with the examples from this book &lt;a href=&quot;http://stroustrup.com/Programming/&quot;&gt;here&lt;/a&gt;. FLTK is software used to write graphical applications. So far my experiences with these types of set ups have been nothing but disastrous. A semester ago, I had to install Qt, the process was pretty nightmarish, there wasn’t a proper tutorial and it was basically me searching all of stackoverflow. In the end I got it, but the experience was quite painful and something that I thought I wouldn’t have to go through again. Fast forward, here I am, in need to install GUI software again. Can you feel what’s coming?&lt;/p&gt;

&lt;h3 id=&quot;lesson-not-learned&quot;&gt;Lesson not learned&lt;/h3&gt;

&lt;p&gt;From my experience with Qt, I should have known that the process was going to be a bit tricky. But even so, I ignored everything and thought that a simple google search would solve things (Oh, how wrong was I). After a bit of searching I found that I needed to get the tarball (later found that there was an apt-get package), unzip the tarball and run some commands. It went something like this…&lt;/p&gt;

&lt;p&gt;First &lt;code&gt;tarball&lt;/code&gt;, which was done with much help from &lt;a href=&quot;http://askubuntu.com/questions/25347/what-command-do-i-need-to-unzip-extract-a-tar-gz-file&quot;&gt;here&lt;/a&gt;,&lt;/p&gt;

&lt;p&gt;```sh
tar -xvf file-ending-with.tar.gz&lt;/p&gt;

&lt;h1 id=&quot;the-flags&quot;&gt;the flags&lt;/h1&gt;
&lt;p&gt;# x extracts, v outputs files being extracted, f for path and name of file
```&lt;/p&gt;

&lt;p&gt;This was followed by me running some commands, to install the software,&lt;/p&gt;

&lt;p&gt;```sh
# I got these instructions from somewhere in the internet&lt;/p&gt;

&lt;p&gt;./configure
sudo make
sudo make install
```&lt;/p&gt;

&lt;p&gt;From here on I gained access to the command line tool which was &lt;code&gt;fltk-config&lt;/code&gt;, and to compile a file all that was needed was the &lt;code&gt;--compile&lt;/code&gt; flag. Some samples worked, and some didn’t. The one that needed to work, did not.&lt;/p&gt;

&lt;p&gt;Later, I found that the &lt;code&gt;tarball&lt;/code&gt; that I had unzipped, contained a &lt;code&gt;README&lt;/code&gt; for Unix systems, describing the exact same process above. Man, I could have saved myself some time if I had been more attentive. Documentation is king.&lt;/p&gt;

&lt;p&gt;In there, I was able to run a demo that worked fine. But most importantly, it told me where it had installed the files. They were located in the following paths,&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;/usr/local/include&lt;/code&gt; for headers&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;/usr/local/lib&lt;/code&gt; for libraries (files with ending with &lt;code&gt;.a&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;the-problem&quot;&gt;The problem&lt;/h3&gt;

&lt;p&gt;I found out that the sample program wasn’t compiling because of a bunch of missing headers. In the same link above, there is a link called &lt;code&gt;The complete collection of code ...&lt;/code&gt;, another zip. Inside the zip, there was a &lt;code&gt;GUI&lt;/code&gt; folder with the missing headers. I proceeded to place this &lt;code&gt;GUI&lt;/code&gt; folder in &lt;code&gt;/usr/local/include&lt;/code&gt;. This did not work, as the files where inside a directory (GUI/), and so I had to bring them out to the top directory, cluttering everything. After this, the program no longer gave the header errors but now there were undefined references everywhere.&lt;/p&gt;

&lt;h3 id=&quot;theory&quot;&gt;Theory&lt;/h3&gt;

&lt;p&gt;My gut tells me that the reason for the errors was a missing library (oh, I had to run &lt;code&gt;make&lt;/code&gt; on the GUI folder to obtain a &lt;code&gt;.a&lt;/code&gt; file). I couldn’t solve this the way I had done above with the missing headers.&lt;/p&gt;

&lt;p&gt;Check this,&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/fltk.png&quot; alt=&quot;fltk&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As you can see in those very tiny letters, the &lt;code&gt;fltk-config --compile file.cpp&lt;/code&gt; command is an abbreviation for a &lt;code&gt;g++&lt;/code&gt; compilation command which is looking for a very specific &lt;code&gt;libfltk.a&lt;/code&gt; file. What I attempted to do was, place the missing library path there. And it still didn’t work. And such was the end of my day. Filled with frustration and a lesson learned.&lt;/p&gt;

&lt;h3 id=&quot;what-not-to-do-in-the-future&quot;&gt;What not to do in the future&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Don’t install software based on stackoverflow instructions, take the time to find the proper documentation (README inside zip file)&lt;/li&gt;
  &lt;li&gt;Patience is a virtue, when things don’t work, I start looking for the first hacky solution. Take the time to analyze the error&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;PS. I am most likely just going to install the software on my Windows Desktop as there is a proper instruction for how to do it there.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Write more</title>
   <link href="http://danielcodes.github.io/2016/04/29/write-more/"/>
   <updated>2016-04-29T00:00:00-04:00</updated>
   <id>http://danielcodes.github.io/2016/04/29/write-more</id>
   <content type="html">&lt;p&gt;I previously wrote about having my productivity on tilt. This week, I slowly started to turn things around. The answer was simple, just find work to do. It’s pretty easy nowadays. Whether working on a new project, learning a tip or two from blog posts, reading books, etc. Most importantly, the thing that really helped me find my groove was writing. Writing forces you to make time and &lt;strong&gt;do&lt;/strong&gt;, it helps with discipline. And once you get the discipline ball rolling, it’s hard to stop.&lt;/p&gt;

&lt;p&gt;The things that I have been recently working on are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;My kendama collection app&lt;/li&gt;
  &lt;li&gt;Finishing the Free Code Camp zipline projects&lt;/li&gt;
  &lt;li&gt;And jotting down nuggets of knowledge on a TIL (today I learned) repo&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I ran into a bit of a wall while working on the Wikipedia search project, diving into documentation that was super dense. This led to me working on it on and off since it was so frustrating, but I finally told myself that I should wrap it up and move on. What really helped was asking for help on the Gitter chat. As a senior student, I sometimes feel too arrogant to ask for help and that is a BIG mistake. Although Google is great, getting direct hints from others who have ran into these problems provides you with way better feedback.&lt;/p&gt;

&lt;p&gt;That was all a bit too weird. To conclude, write more, get disciplined through writing and just find joy in the work.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Going back to the gym</title>
   <link href="http://danielcodes.github.io/2016/04/20/going-back-to-the-gym/"/>
   <updated>2016-04-20T00:00:00-04:00</updated>
   <id>http://danielcodes.github.io/2016/04/20/going-back-to-the-gym</id>
   <content type="html">&lt;p&gt;I went back to the gym this week. I did it to stop myself from making anymore excuses. I have feeling super lackluster in terms of drive lately and so to reignite myself with a sense of purpose, I have decided to start exercising again. It doesn’t matter that I am injured, simply work around the problem. No excuses.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Either you run the day or the day runs you. - Jim Rohn&lt;/p&gt;
&lt;/blockquote&gt;

</content>
 </entry>
 
 <entry>
   <title>A commit a day</title>
   <link href="http://danielcodes.github.io/2016/04/11/commit-streak/"/>
   <updated>2016-04-11T00:00:00-04:00</updated>
   <id>http://danielcodes.github.io/2016/04/11/commit-streak</id>
   <content type="html">&lt;h3 id=&quot;the-decision&quot;&gt;The decision&lt;/h3&gt;

&lt;p&gt;Last month, I set a goal to keep a GitHub commit streak, that is a commit a day. There were a couple of reasons that led to this decision:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;practice ABC (always be coding)&lt;/li&gt;
  &lt;li&gt;work on more projects&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There’s probably more, but those are the main ones. I had gotten into programming a bit late, if I wanted to keep up I needed to be constantly improving my skills.&lt;/p&gt;

&lt;h3 id=&quot;what-ive-learned&quot;&gt;What I’ve learned&lt;/h3&gt;

&lt;p&gt;I have managed to push a daily commit for the past 40 days&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/github-streak.png&quot; alt=&quot;commit-streak&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I can’t say that I have managed to stay 100% true to my goal but I do have some interesting feedback. Setting the goal in itself was easy, so that was the easiest part, cutting the mental barrier. I also told myself that I wouldn’t push out stupid commits, as in commits that didn’t really count, my commits would be meaningful (or at least I would hope so). It is super hard to push out meaningful commits on a daily basis, coding is something that requires you to sit for an uninterrupted amount of time and just fight through problems. As fun as this is, I didn’t always find the time to sit and think and program. And thus I cheated. But not really. Here’s the breakdown of the repositories that I pushed to most often:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/danielcodes/fcc-projects&quot;&gt;FreeCodeCamp log&lt;/a&gt;, most of the FCC projects were done in CodePen so I just linked references to them in a repo&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/danielcodes/today-i-learned&quot;&gt;Today I learned&lt;/a&gt;, I started reading programming books and decided to jot down useful code snippets&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/danielcodes/danielcodes.github.io&quot;&gt;Blog posts&lt;/a&gt;, this posts are hosted through the GitHub, so free commits for every blog post&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;what-can-be-improved&quot;&gt;What can be improved&lt;/h3&gt;

&lt;p&gt;This model is not perfect. I understand that the commits don’t seem super meaningful but I have managed to find some work arounds that still center on me learning a bit of code everyday. Things to improve on include finding more of that quiet time where I can just sit uninterrupted and code away at a project. This is the most meaningful way to push commits to immerse yourself in a project and code away.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Thoughts on hackathons</title>
   <link href="http://danielcodes.github.io/2016/04/04/thoughts-on-hackathons/"/>
   <updated>2016-04-04T00:00:00-04:00</updated>
   <id>http://danielcodes.github.io/2016/04/04/thoughts-on-hackathons</id>
   <content type="html">&lt;p&gt;This weekend I had the pleasure of attending my second hackathon, HackNY Spring 2016. The first one I attended was in the summer, AngelHack Brooklyn 2015. This time around, things were a bit tougher, it wasn’t all smooth sailing and I just want to write about things that I could have done better in terms of preparation and on-site.&lt;/p&gt;

&lt;h3 id=&quot;decide-on-a-goal&quot;&gt;Decide on a goal&lt;/h3&gt;

&lt;p&gt;Hackathons have prizes, these come in two kinds, specific categories (design, technical, etc) and technology specific (companies want you to use their API’s). Before entering the hackathon, you should have made up your mind as to what your target is. Of course, this also implies that you must have an idea that you want to work on. This was my team’s biggest setback during the hackathon, we did not have a concrete idea to work with and were pivoting from time to time resulting lots of wasted time and energy that could have been better used for development.&lt;/p&gt;

&lt;h3 id=&quot;try-to-sleep&quot;&gt;Try to sleep?&lt;/h3&gt;

&lt;p&gt;I believe that I only got about 40 minutes of sleep that night. These 24-hour hackathons encourage you to code through the night and you probably will since you want to win (duh) are pretty damn exhausting. In fact, I was dozing off near the end of the demos. Once I got home, I could not wait to close my eyes and just get some rest. I crashed from 7 PM to 8 AM the next day. Be aware that hackathons do have a high burnout rate. Though I guess it’s ok, since it is a once in a while thing.&lt;/p&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;This hackathon was specially tough since my team had gone in with the goal to win (what team doesn’t) but came up short. The biggest downfall was being prize-driven and trying to create an idea out of a narrow set of contraints (API’s) rather than letting an idea open up our creativity.&lt;/p&gt;

&lt;p&gt;PS. Despite the negative tone, hackathons are hella fun and you should try them out if you get the chance :)&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>On typing</title>
   <link href="http://danielcodes.github.io/2016/03/29/on-typing/"/>
   <updated>2016-03-29T00:00:00-04:00</updated>
   <id>http://danielcodes.github.io/2016/03/29/on-typing</id>
   <content type="html">&lt;h2 id=&quot;humble-beginnings&quot;&gt;Humble beginnings&lt;/h2&gt;

&lt;p&gt;I &lt;em&gt;first learned to type&lt;/em&gt; and then learned to program. I remember when I was still in High School a couple years back (wow, more than 5!) whenever I had the need to type papers or anything on the computer, I would type.. like a noob. I did a bit better than hunt and peck as I used more than just my index fingers to type but I was still heavily inefficient. And so I decided to change things, there had to be a &lt;em&gt;correct way to type&lt;/em&gt;, and there was, it is called &lt;strong&gt;touch typing&lt;/strong&gt;. &lt;a href=&quot;https://en.wikipedia.org/wiki/Touch_typing&quot;&gt;Touch typing&lt;/a&gt; is the ability to type using all ten fingers without looking at the keyboard. When I first read about it, I was pretty amazed, and I would have quickly jumped into learning this new skill. Except that I didn’t, I had a decision to make between keyboard layouts, QWERTY or Dvorak.&lt;/p&gt;

&lt;h2 id=&quot;introducing-dvorak&quot;&gt;Introducing Dvorak&lt;/h2&gt;

&lt;p&gt;Around this same time, I was into cubing (only 3x3). I followed this guy, Shotaro Makisumi, who had set various records. In his website, he had a section on &lt;a href=&quot;https://en.wikipedia.org/wiki/Dvorak_Simplified_Keyboard&quot;&gt;Dvorak&lt;/a&gt;. Dvorak is a different keyboard layout made for comfortable typing in the English language. Here I was, having just found out about this magical keyboard layout and on my quest to learn to touch type. Coincidence? I think not. So began my this little adventure. It was a very frustrating experience at first. I was not a touch typer and learning a keystroke at a time really tested my patience. However, once I had learned the home row keys (10 keys), things started to get fun! In Dvorak, all the consonants are placed on your left hand side, so lots of words are readily available without lifting a finger unlike it’s counterpart QWERTY. After about a month or so of practicing (yeah, I took my time), I was finally able to touch type in Dvorak! It was an amazing feeling, it still is an amazing feeling everyday I get to type in this beautifully laid out set of letters. My words-per-minute (WPM) also skyrocketed from about 35-40 to about 60 (I type at about 70 - 80 WPM now). It was pretty life changing. I mean let’s face it, the past couple of years has been a lot of staring at the computer and a lot of typing.&lt;/p&gt;

&lt;h2 id=&quot;qwerty-again&quot;&gt;QWERTY again&lt;/h2&gt;

&lt;p&gt;Funny enough, I thought that once I had learned Dvorak, I would never have to touch QWERTY again. &lt;strong&gt;WRONG&lt;/strong&gt;. The only time I could type in Dvorak, was at home. This left me largely dependent on computer usage at school. I postponed this as much as possible but once I found out I would need to program for an exam in a QWERTY keyboard, I was finally forced to learn QWERTY. Although I had been spoiled by the Dvorak keyboard, learning to touch type QWERTY wasn’t all that bad. I was familiar with the procedure, more patient and managed to complete the task in about 2 - 3 weeks with daily practice. This turned out benefitial in the long run, with my efficiency no longer bound to using my personal computer.&lt;/p&gt;

&lt;h2 id=&quot;why-you-should-learn-to-touch-type&quot;&gt;Why you should learn to touch type&lt;/h2&gt;

&lt;p&gt;Now &lt;em&gt;drumroll please&lt;/em&gt;, why you should learn to touch type? Well, if you’re like me and you use your computer on a daily basis it is well worth the investment to learn to type properly. You won’t dread computer tasks anymore, and actually have an enjoyable experience. So whether it’d be Dvorak which I highly recommend or QWERTY, invest the time to learn this ubiquitous skill. It will take time, it will be challenging, but very well worth it at the end!&lt;/p&gt;

&lt;p&gt;PS. Here a screenshot of my favorite typing game, &lt;a href=&quot;https://www.keyhero.com/&quot;&gt;KeyHero&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/key_hero.png&quot; alt=&quot;Key Hero&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;references&quot;&gt;References&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Typing#Hunt_and_peck&quot;&gt;Hunt and peck&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://makisumi.com/dvorak/&quot;&gt;Dvorak first encounter&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://learn.dvorak.nl/&quot;&gt;Dvorak training&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</content>
 </entry>
 
 <entry>
   <title>Positivity</title>
   <link href="http://danielcodes.github.io/2016/03/22/positivity/"/>
   <updated>2016-03-22T00:00:00-04:00</updated>
   <id>http://danielcodes.github.io/2016/03/22/positivity</id>
   <content type="html">&lt;p&gt;I type this as I already crossed out two previously written paragraphs. I hate it when this happens, but I don’t want to push out any negative vibes so I will halt. Haven’t been feeling 100% as of lately, but that’s about to change.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;In order to carry a positive action we must develop here a positive vision - Dalai Lama&lt;/p&gt;
&lt;/blockquote&gt;

</content>
 </entry>
 
 <entry>
   <title>Vagrant, we meet again</title>
   <link href="http://danielcodes.github.io/2016/03/13/vagrant-we-meet-again/"/>
   <updated>2016-03-13T00:00:00-05:00</updated>
   <id>http://danielcodes.github.io/2016/03/13/vagrant-we-meet-again</id>
   <content type="html">&lt;p&gt;I haven’t logged into my desktop vagrant box since October 2015. After logging in a couple of days ago, I managed to mess things up, and lost my VM (might have to do with the VirtualBox upgrade). It wasn’t a big deal though, it was the box spun up from the &lt;a href=&quot;https://www.vagrantup.com/docs/getting-started/&quot;&gt;Getting Started&lt;/a&gt; tutorial. Although, I did attempt to fix the problem by following &lt;a href=&quot;http://zachwills.net/fix-for-vagrant-not-detecting-existing-vm/&quot;&gt;this blog post&lt;/a&gt; but ultimately failed as when I did a &lt;code&gt;vagrant up&lt;/code&gt; it would not connect because of authentication and so I disposed of the box. In the process of trying to acquire a new Linux environment, I found out that 64-bit boxes would not work for whatever reason (this needed some looking into that I clearly didn’t want to do, vagrant bugs are notorious and I didn’t want to spend hours trying to fix this, speaking from experience), The boxes that I attempted to install are &lt;strong&gt;hashicorp/precise64&lt;/strong&gt; and &lt;strong&gt;ubuntu/trusty64&lt;/strong&gt;, both of which failed. And so, I had to stick with my old &lt;strong&gt;hashicorp/precise32&lt;/strong&gt; box.&lt;/p&gt;

&lt;p&gt;The reason that I needed a Linux environment in my Windows machine was to run some C++ programs. I am currently a TA for an introductory course that requires me to grade programs. I didn’t want to do things on my small laptop screen and thought things would be much smoother on my larger 23-inch desktop monitor. Yeah, I know that it is completely overkill as all I needed to do was install &lt;a href=&quot;http://www.mingw.org/&quot;&gt;MinGW&lt;/a&gt; and the compiler. But after getting used to working on Linux on my laptop, MinGW is just not good enough. Who knows, maybe I might need to run some Python later on, or anything that is a nightmare setting up on Windows (everything).&lt;/p&gt;

&lt;p&gt;After loading the box, I did a quick &lt;code&gt;vagrant ssh&lt;/code&gt; and ran the usual:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;shell
sudo apt-get update
sudo apt-get upgrade
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;to get the machine up to date, and proceeded to install the software I needed, &lt;code&gt;gcc, vim, git and some python tools&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Process was relatively fast, about 10 minutes and I now had a fully working Linux environment. Maybe that is a bit of a stretch as I can only access the box through &lt;code&gt;ssh&lt;/code&gt; but good enough. With some basic tooling up, I needed to re-create my development environment which mainly includes of adding my &lt;code&gt;.vimrc and .bash_aliases&lt;/code&gt;. I have had to do this process a couple of times from the servers that I have had to configure so it might be time to learn some shell scripting and automate this process.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;If you need a quick and dirty way to set up a Linux environment on Windows, the &lt;strong&gt;Cygwin + Vagrant&lt;/strong&gt; combo is pretty good. The only downside is that you to learn some UNIX basics, and it’s preferred if you know Vim, although they do provide you with a shared folder where you can edit files with your native editor.&lt;/p&gt;

&lt;h3 id=&quot;references&quot;&gt;References&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/danielcodes/dotfiles&quot;&gt;My dotfiles&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://atlas.hashicorp.com/boxes/search&quot;&gt;Vagrant boxes&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.ee.surrey.ac.uk/Teaching/Unix/&quot;&gt;Unix basics&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</content>
 </entry>
 
 <entry>
   <title>Things on Medium</title>
   <link href="http://danielcodes.github.io/2016/03/07/things-on-medium/"/>
   <updated>2016-03-07T00:00:00-05:00</updated>
   <id>http://danielcodes.github.io/2016/03/07/things-on-medium</id>
   <content type="html">&lt;p&gt;I have been reading a lot of stuff on Medium lately, though mostly the &lt;em&gt;Programming&lt;/em&gt; and &lt;em&gt;Javascript&lt;/em&gt; tags (duh). However, at times my attention diverts to top stories if the title is interesting or click-baity enough. Like the article about the &lt;a href=&quot;https://medium.com/@taliajane/an-open-letter-to-my-ceo-fb73df021e7a#.c0q7fr9do&quot;&gt;girl who got fired from Yelp&lt;/a&gt;, the lady who followed up with a lecture from her own life lessons, the guy who wrote about that we shouldn’t make judgement based on one article as we don’t know that person. Lastly, the lady who reprimanded the previous lady for lacking basic empathy. I referenced only the first article as the rest of the responses you can find on Medium just by typing the name of the author that created this crazy chain reaction. Though make sure you have time, as these articles are not short and maybe after you’ll start qusetioning why you decided to start reading this at all.&lt;/p&gt;

&lt;p&gt;On a different note, I came across a more relevant article, titled &lt;a href=&quot;https://medium.com/@benedictfritz/learning-programming-isn-t-that-hard-deep-work-is-hard-40a4cf3104f4&quot;&gt;Learning programming isn’t that hard, deep work is hard&lt;/a&gt;. This piece describes the mentality needed to learn to program, that programming takes time to solve and progress comes in slowly &lt;strong&gt;(deep work)&lt;/strong&gt; rather than being able to immediately tackle TODO’s such as emails, meetings, etc &lt;strong&gt;(shallow work)&lt;/strong&gt;. This hit home for me as I am starting to immerse myself in programming, I see that even though at times you feel that you understand things (looking at code, going through tutorials, etc), &lt;strong&gt;you &lt;em&gt;MUST&lt;/em&gt; go through the struggle of doing the problem yourself&lt;/strong&gt;. There is a need to create that muscle memory connection, if your brain remembers struggling with the problem, chances are it’ll be no problem the next time around.&lt;/p&gt;

&lt;p&gt;And, I finally wrapped up the Intermmediate Algorithms on Free Code Camp :)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/fcc/inter_algo.png&quot; alt=&quot;Algo Badge&quot; /&gt;&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>More Javascript practice</title>
   <link href="http://danielcodes.github.io/2016/03/01/more-js-practice/"/>
   <updated>2016-03-01T00:00:00-05:00</updated>
   <id>http://danielcodes.github.io/2016/03/01/more-js-practice</id>
   <content type="html">&lt;p&gt;I have had my eye on &lt;a href=&quot;http://www.freecodecamp.com/&quot;&gt;Free Code Camp&lt;/a&gt; for a while now, but I saw that it was teaching lot of the basics that I felt that I had already learned (at least some of it). But, after getting told on a phone interview that I would need to do a coding challenge in Javascript, I immediately jumped onto the Algorithms section and did as many of the challenges as time allowed. I was dumb and did not pick a large enough time window to practice all of these exercises. Of course, this was all happened after I was panicking as to what would be the best way to practice. After going through a couple of the exercises, I found them quite enjoyable and I managed to cram all the exercises (the basic algorithms section) in 2 days. Not bad for something that’s supposed to take an estimated 50 hours. Guess these 4 years in college haven’t been for nothing, HAHA.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/fcc/basic_algo.png&quot; alt=&quot;Badge&quot; /&gt;&lt;/p&gt;

&lt;p&gt;However, this wasn’t met without some resistance. I wasn’t super smooth at completing all the challenges and a couple of them took a fair bit of head banging. Here are some of the things I learned:&lt;/p&gt;

&lt;h3 id=&quot;do-not-be-a-blind-coder&quot;&gt;1. DO NOT be a blind coder&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;console.log(all_things)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;By this, I mean that do not write a mess of logic without making sure that these logic steps are correct. ie. if you’re creating an array of values, &lt;strong&gt;PRINT&lt;/strong&gt; that array and make sure that those values are there, same thing goes if you’re modifying it, always check that the output is as expected. The saying goes,&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Seeing is believing&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;which is absolutely true for programming, do not program blindly.&lt;/p&gt;

&lt;h3 id=&quot;incorporate-functional-programming&quot;&gt;2. Incorporate functional programming&lt;/h3&gt;

&lt;p&gt;This turned out to be a good chance to practice functional programming. Getting used to applying, &lt;code&gt;map(), filter() and reduce()&lt;/code&gt; whenever possible. If you don’t know what those are, here’s a brief overview:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Map&lt;/strong&gt;, applies a function to each element of an array&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Filter&lt;/strong&gt;, same as map, but only keeps the elements that return true&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Reduce&lt;/strong&gt;, takes an array and compresses it into a single value&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Some examples for each of these functions are, adding one to each element, getting the odds/evens and getting the sum of integers. Check out the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array&quot;&gt;Docs&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;use-all-the-built-ins&quot;&gt;3. Use all the built-ins&lt;/h3&gt;

&lt;p&gt;Most of the time, a lot of the functionality that you require is already provided in a method. A good example are Strings, there is &lt;code&gt;split(), join(), splice(), etc.&lt;/code&gt; just to name a few. Check out more &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String&quot;&gt;Docs&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;That sums it up. See your output, do not code logic on top of logic without seeing the results. Try to use &lt;code&gt;map, filter and reduce&lt;/code&gt;, chances are there are plenty of use cases. And use built-ins, these methods are there to make your life easier. With that said, happy coding :D&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Playing with GET/POST on Flask</title>
   <link href="http://danielcodes.github.io/2016/02/15/get-and-post-on-flask/"/>
   <updated>2016-02-15T00:00:00-05:00</updated>
   <id>http://danielcodes.github.io/2016/02/15/get-and-post-on-flask</id>
   <content type="html">&lt;p&gt;I signed up to give a web development workshop for my school’s ACM club. Beginning with the basics HTML/CSS to creating a small application with Flask. Planning this has been a little tougher than expected as to what I want people to come out the workshop knowing. Of course, the musts are the &lt;strong&gt;main three elements&lt;/strong&gt; that go into a web framework:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;URL handling&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Templating&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Object Relational Mapper (ORM)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With Flask, one and two are simple, the third one is a little trickier as an extension is needed. After going through the quickstart tutorial for &lt;strong&gt;Flask-sqlalchemy&lt;/strong&gt;, I was confident that I’d be able to produce some useful &lt;strong&gt;GET/POST&lt;/strong&gt; examples. What I found was that these methods could be used interchangeably and abused. Here’s why:&lt;/p&gt;

&lt;h3 id=&quot;the-get-method&quot;&gt;The GET method&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;GET&lt;/strong&gt; is the default http method when accessing a page, you’re retrieving a page.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;GET&lt;/code&gt; can be passed arguments by a form or by a query string in the URL.&lt;/p&gt;

&lt;h4 id=&quot;get-form&quot;&gt;GET Form&lt;/h4&gt;
&lt;p&gt;```html&lt;/p&gt;
&lt;form action=&quot;/get_something&quot; method=&quot;GET&quot;&gt;
	&lt;input type=&quot;text&quot; name=&quot;name&quot; /&gt;
	&lt;input type=&quot;text&quot; name=&quot;job&quot; /&gt;
	&lt;input type=&quot;submit&quot; value=&quot;Add Person&quot; /&gt;
&lt;/form&gt;
&lt;p&gt;```&lt;/p&gt;

&lt;h4 id=&quot;get-query-string&quot;&gt;GET Query string&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;
http://arandomurl.com/get_something?name=daniel&amp;amp;job=student
the ? is followed by key=value pairs tied together with an &amp;amp;
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;These are the two ways to pass arguments to a GET request, the way to retrieve them on Flask is by accessing the &lt;code&gt;args&lt;/code&gt; attribute, which returns a dictionary, containing the the key-value pairs passed. In this case, name and job.&lt;/p&gt;

&lt;p&gt;```python
#a dict
#check out the reference below for more on python dictionaries
arguments = request.args&lt;/p&gt;

&lt;h1 id=&quot;a-specifir-argument&quot;&gt;a specifir argument&lt;/h1&gt;
&lt;p&gt;name = request.args.get(‘name’) 
#or
name = request.args[‘name’]&lt;/p&gt;

&lt;h1 id=&quot;note-if-argument-is-not-there-get-returns-none-access-with-brackets-gives-a-keyerror&quot;&gt;Note: if argument is not there, get returns None, access with brackets gives a KeyError&lt;/h1&gt;
&lt;p&gt;```&lt;/p&gt;

&lt;h3 id=&quot;the-post-method&quot;&gt;The POST method&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;POST&lt;/strong&gt; is the http method used when you want to alter the application.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;ie. creating a new account, saving records to a database.&lt;/p&gt;

&lt;h4 id=&quot;post-form&quot;&gt;POST Form&lt;/h4&gt;
&lt;p&gt;```html&lt;/p&gt;
&lt;form action=&quot;/post_something&quot; method=&quot;POST&quot;&gt;
	&lt;input type=&quot;text&quot; name=&quot;name&quot; /&gt;
	&lt;input type=&quot;text&quot; name=&quot;job&quot; /&gt;
	&lt;input type=&quot;submit&quot; value=&quot;Add Person&quot; /&gt;
&lt;/form&gt;
&lt;p&gt;```&lt;/p&gt;

&lt;p&gt;When this form is submitted, the following passed arguments, name and job can be accessed in the following manner:&lt;/p&gt;

&lt;p&gt;```python
#a dict
arguments = request.form&lt;/p&gt;

&lt;h1 id=&quot;a-specific-argument&quot;&gt;a specific argument&lt;/h1&gt;
&lt;p&gt;name = request.form.get(‘name’)
#or
name = request.form[‘name’]&lt;/p&gt;

&lt;h1 id=&quot;note-if-argument-is-not-there-get-returns-none-access-with-brackets-gives-a-keyerror-1&quot;&gt;Note: if argument is not there, get returns None, access with brackets gives a KeyError&lt;/h1&gt;
&lt;p&gt;```&lt;/p&gt;

&lt;h3 id=&quot;abusing-getpost&quot;&gt;Abusing GET/POST&lt;/h3&gt;
&lt;p&gt;So far, I’ve shown that both &lt;strong&gt;GET&lt;/strong&gt; and &lt;strong&gt;POST&lt;/strong&gt; can take arguments in pretty much the same manner. Difference is that one receives it in &lt;code&gt;args&lt;/code&gt; while the other in &lt;code&gt;form&lt;/code&gt;. In Flask, it looks a little like this:&lt;/p&gt;

&lt;p&gt;```python
@app.route(‘/&lt;some-url&gt;&#39;, methods=[&#39;GET&#39;, &#39;POST&#39;])
def some_view():
	#depending on what method you used to pass arguments
	#retrieve them from args or form and do something&lt;/some-url&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;return &amp;lt;some_html&amp;gt;  ```
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;Since you can pass arguments to either method, they can be used interchangeably and therefore abused. To prevent this, &lt;strong&gt;be informed&lt;/strong&gt; as to what GET and POST are. GET should only retrieves information, while POST is used to create new information.&lt;/p&gt;

&lt;h3 id=&quot;references&quot;&gt;References&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.jeffknupp.com/blog/2015/08/30/python-dictionaries/&quot;&gt;Python Dictionaries&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.jeffknupp.com/blog/2014/03/03/what-is-a-web-framework/&quot;&gt;What is a web framework?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://flask-sqlalchemy.pocoo.org/2.1/quickstart/&quot;&gt;Flask-sqlalchemy&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</content>
 </entry>
 
 <entry>
   <title>Celebrating too early</title>
   <link href="http://danielcodes.github.io/2016/02/13/celebrating-too-early/"/>
   <updated>2016-02-13T00:00:00-05:00</updated>
   <id>http://danielcodes.github.io/2016/02/13/celebrating-too-early</id>
   <content type="html">&lt;p&gt;I had derp moment this Thursday when I thought a deed was done when it wasn’t.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Things are not done until they’re done.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I should have known as the procedure felt super rushed and I was just so hyped that there had been a tiny bit of progress on what had been a week long struggle.&lt;/p&gt;

&lt;p&gt;This reminded me of 2014’s &lt;strong&gt;Rockets vs. Trail Blazers&lt;/strong&gt; playoff series. The Rockets were up 2, but the Trail Blazers had one last possession with very little time left. Note that this was Game 6 with the Trail Blazers up 3 - 2, so it was very likely that the Rockets were going to force that Game 7. Lillard sunk a game winning 3, closing out the Rockets.&lt;/p&gt;

&lt;h3 id=&quot;check-it-out-here&quot;&gt;Check it out here:&lt;/h3&gt;

&lt;iframe style=&quot;padding-bottom: 20px; padding-top: 20px;&quot; width=&quot;560&quot; height=&quot;400&quot; src=&quot;https://www.youtube.com/embed/V2GJ2PwXQ4E&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;Funny thing was that Lillard was pretty expressionless after that shot. On an interview with Conan (which I can’t seem to find) he’d said that he knew better than to celebrate early as he’d lost a High School game in that same manner and vowed to never celebrate too early again.&lt;/p&gt;

&lt;h3 id=&quot;moral-of-the-story-is&quot;&gt;Moral of the story is:&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;Don’t rush the process, follow through and finish&lt;/p&gt;
&lt;/blockquote&gt;

</content>
 </entry>
 
 <entry>
   <title>A productive winter break</title>
   <link href="http://danielcodes.github.io/2016/02/06/productive-winter-break/"/>
   <updated>2016-02-06T00:00:00-05:00</updated>
   <id>http://danielcodes.github.io/2016/02/06/productive-winter-break</id>
   <content type="html">&lt;p&gt;I had a very productive winter break. I managed to hit alot of milestones and that required a drastic change in my day to day routine. Amongst the things that I accomplished are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Finishing 3 Pluralsight courses&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Advanced Javascript&lt;/li&gt;
      &lt;li&gt;Python Fundamentals&lt;/li&gt;
      &lt;li&gt;Python Beyond the Basics&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Doing a chapter a day from the Test Driven Development with Python book&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I started by reading the &lt;a href=&quot;https://github.com/getify/You-Dont-Know-JS&quot;&gt;&lt;strong&gt;You-Dont-Know-JS&lt;/strong&gt;&lt;/a&gt; book series, managed to get past the first two and decided to just do the video lesson instead. I still plan to finish the rest of the books somewhere along this semester. As to Python, having worked on a Django project in the Fall, at times I felt that my understanding was lacking. So I took the time to really get the basics down, this has helped tremendously as I feel much more confident in my ability to read Python code. Consuming too much video material in one sitting is always a bad idea (found that the hard way), so I found balance by watching only an hour of the course per day. This was followed by practicing whatever I had learned right away.&lt;/p&gt;

&lt;p&gt;Learning the basics of a language was only part of my day, I used the rest of the day to read a chapter from &lt;a href=&quot;http://chimera.labs.oreilly.com/books/1234000000754/index.html&quot;&gt;&lt;strong&gt;TDD with Python&lt;/strong&gt;&lt;/a&gt;. These chapters were &lt;strong&gt;DENSE&lt;/strong&gt; so I had to spend a good 2 - 3 hours per chapter, that is only if things went smoothly, at times debugging would take a frustratingly long time. I managed to cover everything from Chapter 8 to Chapter 19. I still have 2 chapters until I wrap up the book, which will get done somewhere in this month. Overall it’s been such a great book, hands-on teaching on the TDD practice. Really can’t wait to start applying it to my own projects.&lt;/p&gt;

&lt;p&gt;This pretty much sums it up, most of the week (I’d say 5/7 days) I would make sure that I got a hour of video and one chapter of the book down, no matter what. This wouldn’t have been possible with the irregular sleep schedule that I had at that time. I needed to become a morning person. A morning person, gets more hours in the day and if I was to be productive at all, I needed all the time I could get my hands on.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Become productivity-obssessed, wake up early, and get work done.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;That’s my new motto.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Set your Disqus configuration variables</title>
   <link href="http://danielcodes.github.io/2016/02/03/disqus-variables/"/>
   <updated>2016-02-03T00:00:00-05:00</updated>
   <id>http://danielcodes.github.io/2016/02/03/disqus-variables</id>
   <content type="html">&lt;p&gt;After deciding on the theme that I wanted to use for this site, &lt;a href=&quot;https://github.com/poole/hyde&quot;&gt;Hyde&lt;/a&gt;. I was also actively looking for ways to improve my site. I found this really helpful &lt;a href=&quot;http://joshualande.com/jekyll-github-pages-poole/&quot;&gt;article&lt;/a&gt;, which helped me add an &lt;strong&gt;Archive&lt;/strong&gt; to see my posts in log format, &lt;strong&gt;Analytics&lt;/strong&gt; to track views and &lt;strong&gt;Comments&lt;/strong&gt; for feedback. After going through the steps, everything was well set up, or so I thought. When setting up Disqus comments, I placed the provided markup on my page but neglected to fill in the variables that they had &lt;strong&gt;strongly&lt;/strong&gt; suggested me to replace.&lt;/p&gt;

&lt;h3 id=&quot;the-variables-url-and-identifier&quot;&gt;The variables, url and identifier&lt;/h3&gt;

&lt;p&gt;```javascript
var disqus_config = function () {
	// Replace PAGE_URL with your page’s canonical URL variable
	this.page.url = PAGE_URL;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// Replace PAGE_IDENTIFIER with your page&#39;s unique identifier variable
this.page.identifier = PAGE_IDENTIFIER;   }; ``` 
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;where-i-goofed-up&quot;&gt;Where I goofed up&lt;/h3&gt;

&lt;p&gt;The way Disqus works is by keying a provided URL, defined by a url variable. As you can tell, I did not define this URL and when I received the first comment on my page, sometimes it showed up and sometimes it didn’t. The problem was how the page was being accessed, by that I mean the protocol used. Disqus was creating two different comment threads for &lt;code&gt;http://&lt;/code&gt; and &lt;code&gt;https://&lt;/code&gt;. And so, I got annoyed and had to fix the problem.&lt;/p&gt;

&lt;p&gt;I headed over to the documentation and found that I needed to provide an absolute url, and the slug part of the url that comes after the domain name.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;javascript
//ie. example url and identifier
var this.page.url = &quot;http://danielcodes.github.io/2016/01/12/resuming-python/&quot;
var this.page.identifier = &quot;/2016/01/12/resuming-python/&quot;
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The way to obtain these variables with Jekyll is:&lt;/p&gt;

&lt;p&gt;```javascript&lt;/p&gt;

&lt;p&gt;// Replace PAGE_URL with your page’s canonical URL variable
var this.page.url = “{{site.url}}{{page.url}}”;&lt;/p&gt;

&lt;p&gt;// Replace PAGE_IDENTIFIER with your page’s unique identifier variable
var this.page.identifier = “{{page.url}}”;&lt;/p&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;p&gt;The beginning part, &lt;code&gt;site.url&lt;/code&gt; has to be defined in your &lt;code&gt;_config.yml&lt;/code&gt;, check mine &lt;a href=&quot;https://github.com/danielcodes/danielcodes.github.io/blob/master/_config.yml&quot;&gt;here&lt;/a&gt;. This is followed by, &lt;code&gt;page.url&lt;/code&gt;, which will look for the route of your blog post.&lt;/p&gt;

&lt;p&gt;That’s pretty much it, define your javascript cofiguration variables and avoid the split threads.
And don’t forget to test things out first!&lt;/p&gt;

&lt;h3 id=&quot;references&quot;&gt;References&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://help.disqus.com/customer/en/portal/articles/2158629&quot;&gt;Avoiding split threads and missing comments&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://help.disqus.com/customer/en/portal/articles/472098-javascript-configuration-variables&quot;&gt;Javascript configuration variables&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</content>
 </entry>
 
 <entry>
   <title>Adding minimal social media icons</title>
   <link href="http://danielcodes.github.io/2016/01/30/adding-minimal-icons/"/>
   <updated>2016-01-30T00:00:00-05:00</updated>
   <id>http://danielcodes.github.io/2016/01/30/adding-minimal-icons</id>
   <content type="html">&lt;p&gt;I set out to add a list of social media icons this past week, I had been postponing the task for a while now and finally got around doing it. It shouldn’t have been hard, find icon images and link them up, right? Well.. things didn’t go so smoothly for me. Actually, it did work, but there was a pesky little aesthetic detail that drove me a bit crazy.&lt;/p&gt;

&lt;p&gt;I decided to use &lt;a href=&quot;https://fortawesome.github.io/Font-Awesome/&quot;&gt;Font Awesome&lt;/a&gt; for the icons, from its vast collection of icons, I only needed 4. But who knows later on I might create other profiles that might require them, it’s nice to have options.&lt;/p&gt;

&lt;p&gt;I chose to be lazy and simply added the provided CDN to my site:&lt;/p&gt;

&lt;p&gt;```html&lt;/p&gt;
&lt;link rel=&quot;stylesheet&quot; href=&quot;https://maxcdn.bootstrapcdn.com/font-awesome/4.5.0/css/font-awesome.min.css&quot; /&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;p&gt;With that in place, icon insertion is just a matter of placing &lt;code&gt;&amp;lt;i&amp;gt;&lt;/code&gt; tags, selecting the ones you want through a class:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;html
&amp;lt;i class=&quot;fa fa-github&quot;&amp;gt;&amp;lt;/i&amp;gt;
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;So I had the icons, the only extra thing that I did was wrap these tags with &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; tags to link them to my profiles. Check it out in the JSFiddle below:&lt;/p&gt;

&lt;iframe width=&quot;100%&quot; height=&quot;200&quot; src=&quot;//jsfiddle.net/m2s2qshm/3/embedded/html,result/&quot; allowfullscreen=&quot;allowfullscreen&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;

&lt;h3 id=&quot;the-problem&quot;&gt;The Problem&lt;/h3&gt;

&lt;p&gt;At this point, I had something working, icons and their respective links. Now, if you look at the result tab in the fiddle, you’ll see that the first three icons have some type of dash shadow at the bottom. Whenever I’d hover over these icons, the shadow would show. I can only assume that it has to do with links themselves, similar to how hovering over text links makes them darker and underlined.&lt;/p&gt;

&lt;p&gt;I looked at other tutorials and it turned out that they placed all the links in a &lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt; tag. I proceded to play around with things, but it must of not been my day as it did not work. I was pretty close to giving up on the issue altogether.&lt;/p&gt;

&lt;h3 id=&quot;solution&quot;&gt;Solution&lt;/h3&gt;

&lt;p&gt;Today, out of curiosity I looked over a repository that a friend starred on GitHub. I visited the &lt;a href=&quot;https://nusmods.com/timetable/2015-2016/sem2&quot;&gt;website&lt;/a&gt; and saw that they had the icons I wanted. I decided to give it one last ditch effort. I opened up Developer Tools and proceeded to look at the markup. I saw that the site used a &lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt; tag, and I wondered,&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Why the heck didn’t it work the other time?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Whatever the case may be. I proceeded to wrap the links in &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; tags and the whole thing in a &lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt; tag.&lt;/p&gt;

&lt;p&gt;Only two things remained to be done, remove the bullet points from the list and place the elements inline, done with the following bit of CSS:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;css
/*targetting the &amp;lt;ul&amp;gt; with social-icons class*/
.social-icons { list-style: none; }
.social-icons li { display: inline-block; }
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Here’s the final result:&lt;/p&gt;

&lt;iframe width=&quot;100%&quot; height=&quot;150&quot; src=&quot;//jsfiddle.net/kn3y78gz/2/embedded/result/&quot; allowfullscreen=&quot;allowfullscreen&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;No more annoying little dashes at the bottom, good grief.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Reading Python, a formatted table</title>
   <link href="http://danielcodes.github.io/2016/01/22/python-table-formatting/"/>
   <updated>2016-01-22T00:00:00-05:00</updated>
   <id>http://danielcodes.github.io/2016/01/22/python-table-formatting</id>
   <content type="html">&lt;p&gt;After finshing the &lt;strong&gt;Python Fundamentals&lt;/strong&gt; course on Pluralsight, the next step was the follow-up course, &lt;strong&gt;Python - Beyond the Basics&lt;/strong&gt;. I recently went over the module about string and representations, which covered &lt;code&gt;str()&lt;/code&gt; and &lt;code&gt;repr()&lt;/code&gt;. Both methods when called on, provide information about the object instance. &lt;code&gt;str()&lt;/code&gt; providing a general description (contents) while &lt;code&gt;repr()&lt;/code&gt; provides a fuller description (type and other small details). The module was short and sweet, about 20 minutes long. However, near the end of the course, a program was introduced that created tables based on provided lists. And this Table class had &lt;code&gt;str()&lt;/code&gt; and &lt;code&gt;repr()&lt;/code&gt; methods defined. The &lt;code&gt;str()&lt;/code&gt; method provided the table contents in a nice formatted output, while &lt;code&gt;repr()&lt;/code&gt; simply provided the type and column titles.&lt;/p&gt;

&lt;p&gt;```python
#Defining columns and data lists
header = [‘First Name’, ‘Last Name’]
first = [‘Daniel’, ‘Ronnie’, ‘Vanessa’]
last = [‘Chia’, ‘Hernandez’, ‘Luka’]&lt;/p&gt;

&lt;p&gt;t = Table(header, first, last)&lt;/p&gt;

&lt;p&gt;print(str(t))
print(repr(t))&lt;/p&gt;

&lt;h1 id=&quot;output&quot;&gt;Output&lt;/h1&gt;
&lt;p&gt;#a formatted table for str()
First Name Last Name
========== =========
Daniel     Chia   &lt;br /&gt;
Ronnie     Hernandez
Vanessa    Luka&lt;/p&gt;

&lt;h1 id=&quot;type-and-column-titles-for-repr&quot;&gt;type and column titles for repr()&lt;/h1&gt;
&lt;p&gt;Table(header=[‘First Name’, ‘Last Name’])
```&lt;/p&gt;

&lt;p&gt;As an exercise I decided to dive into the code and attempt to decipher what was being written. What followed was a painful time trying to understand the code. I don’t know Pluralsight’s policy on putting their content out in the open, so I won’t put up all the code, only snippets of it. Explaining whatever stumped me, so this post is to:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;reinforce my learning&lt;/li&gt;
  &lt;li&gt;show insight to those who haven’t seen these practices&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Without further ado, let’s begin:&lt;/p&gt;

&lt;p&gt;As you can see above, we’re passing a couple of lists (a header for the column titles, followed by lists of data) to the the Table class. This data is then manipulated in the &lt;code&gt;str()&lt;/code&gt; method to provide the formatted output shown.&lt;/p&gt;

&lt;p&gt;The breakdown of the &lt;code&gt;str()&lt;/code&gt; function was actually quite simple:&lt;/p&gt;

&lt;p&gt;First, a few variables are defined:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;number of columns&lt;/li&gt;
  &lt;li&gt;widths of the colums, placed in a list
    &lt;ul&gt;
      &lt;li&gt;compare the longest string in a column vs. column title, the higher of the two becomes the width for that column&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;string formatters, to provide space padding for strings&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The 3rd defined variable, provides a list of the string formatters, &lt;code&gt;[{:column_width}, {:column_width_2}, .. ]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;```python
#padding, example
first_name = ‘‘.format(‘Daniel’)&lt;/p&gt;

&lt;p&gt;’’’
output -&amp;gt; ‘Daniel    ‘
‘’’
```&lt;/p&gt;

&lt;p&gt;After setting up those variables, the table is built row by row.&lt;/p&gt;

&lt;p&gt;First an empty list is created, then 3 append calls are made, one for the header, one for the = line separators and lastly pair up the data lists and place them row by row. Each row is then tied together with a space (column divider), and returned with new line separators for a tabular display.&lt;/p&gt;

&lt;p&gt;I provide the code to create the table, you can get it from:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sh
git clone https://gist.github.com/9840c91f8e94e5177aec.git table
python3 table/table.py
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;First the empty list,&lt;/p&gt;

&lt;p&gt;&lt;code&gt;python
#empyt list
result = []
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Next, append the headers,&lt;/p&gt;

&lt;p&gt;```python
#append header, a generator expression 
#formatters is the list with {:col_width}
#ie. {:10}
#header is a list of column titles
#ie. [‘First name’, ‘Last name’]
‘’’
outputs -&amp;gt; (‘First name’, ‘Last Name’)
note: You don’t actually see this, it is hidden in a generator expression, unless you decide to iterate over it. Note that the expression is inside the result list, [(gen. expr), ..]
‘’’
result.append(
	formatters[i].format(header[i])
	for i in range(col_count))&lt;/p&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;p&gt;the line separators (=),&lt;/p&gt;

&lt;p&gt;```python
#append = line separator, also a generator expression
#grab the widths, ie. [10, 9]
‘’’
outputs -&amp;gt; (‘==========’, ‘=========’)
note: can’t see this either
‘’’
result.append(
	(‘=’ * col_widths[i]
	 for i in range(col_count)))&lt;/p&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;p&gt;creating the rows based on the provided data lists,&lt;/p&gt;

&lt;p&gt;```python
#append data from lists (first and last names), tricky part
#data is a tuple of lists 
#ie. ( [first_names], [last_names], etc )
#by using zip and the * operator, we’re unpacking this tuple and creating the pairs
#we end up with [(first_name, last_name), (another_fn, another_ln), ..], which are the rows themselves!
#we’re giving the appropiate padding to each string
‘’’
outputs -&amp;gt; [‘Daniel    ‘, ‘Chia     ‘],
		   [‘Ronnie    ‘, ‘Hernandez’], 
		   [‘Vanessa   ‘, ‘Luka     ‘]
‘’’&lt;/p&gt;

&lt;p&gt;for row in zip(*data):
	result.append(
		[formatters[i].format(row[i])
		 for i in range(col_count)])
```&lt;/p&gt;

&lt;p&gt;and tying everything together.&lt;/p&gt;

&lt;p&gt;```python
#at this point our result list is almost complete
#it looks like this, printing the items inside it&lt;/p&gt;

&lt;p&gt;’’’
[ (‘First name’, ‘Last Name’)
  (‘==========’, ‘=========’)
  [‘Daniel    ‘, ‘Chia     ‘] 
  [‘Ronnie    ‘, ‘Hernandez’]
  [‘Vanessa   ‘, ‘Luka     ‘] ]
‘’’&lt;/p&gt;

&lt;h1 id=&quot;join-the-rows-with-spaces&quot;&gt;join the rows with spaces&lt;/h1&gt;
&lt;p&gt;result = (‘ ‘.join(r) for r in result)&lt;/p&gt;

&lt;h1 id=&quot;return-the-list-with-line-separators-added&quot;&gt;return the list with line separators added&lt;/h1&gt;
&lt;p&gt;#voila! the list is done
return ‘\n’.join(rslt)
```&lt;/p&gt;

&lt;p&gt;Looking back at the code, it doesn’t seem so bad. It’s often lack of understanding that brings those ‘wat’ moments, so it’s worthwhile to spend the time understading concepts. Read and read more code. Narrowing down on the concepts that threw me off a bit, there are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;lists comprehensions &lt;code&gt;[]&lt;/code&gt; vs. generator expressions &lt;code&gt;()&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;these are similar in providing a group a values&lt;/li&gt;
      &lt;li&gt;some differences are that gen. expressions take less memory and cannot be accessed by index&lt;/li&gt;
      &lt;li&gt;usage, for several iterations use a list, one time use, a generator expression&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;zip function, unpacking arguments with *
    &lt;ul&gt;
      &lt;li&gt;passing the * operator to &lt;code&gt;zip()&lt;/code&gt;, unpacks whatever arguments you throw at it&lt;/li&gt;
      &lt;li&gt;in the example above, data is a tuple of lists (first, last) and we want to create rows out of that data. Without *, the lists would have been needed to be passed indidually to zip, &lt;code&gt;zip(list1, list2, ...)&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;escaping the &lt;code&gt;{}&lt;/code&gt; on format method
    &lt;ul&gt;
      &lt;li&gt;in order to create a list of formatters &lt;code&gt;{:col_widths}&lt;/code&gt;, the &lt;code&gt;{&lt;/code&gt; character needed to be escaped&lt;/li&gt;
      &lt;li&gt;more info in the &lt;a href=&quot;https://docs.python.org/2/library/string.html#format-string-syntax&quot;&gt;official docs&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;Reading someone else’s code can be a humbling experience. It can be tough to break down the complexity of the code or peeling the layers, but at the same time, it is extremely rewarding. The &lt;strong&gt;Aha, I GOT IT!&lt;/strong&gt; moment. Using pen and paper to draw out the problem definitely helped in reducing the logic that I had to wrestle with in my mind.&lt;/p&gt;

&lt;h3 id=&quot;references&quot;&gt;References&lt;/h3&gt;
&lt;p&gt;[1] &lt;a href=&quot;http://code-maven.com/list-comprehension-vs-generator-expression&quot;&gt;Generator expressions&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;[2] Zip, &lt;a href=&quot;http://stackoverflow.com/questions/2511300/why-does-x-y-zipzipa-b-work-in-python&quot;&gt;here&lt;/a&gt; and &lt;a href=&quot;http://pavdmyt.com/python-zip-fu/&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Being goal oriented</title>
   <link href="http://danielcodes.github.io/2016/01/21/goal-oriented/"/>
   <updated>2016-01-21T00:00:00-05:00</updated>
   <id>http://danielcodes.github.io/2016/01/21/goal-oriented</id>
   <content type="html">&lt;p&gt;I have been having trouble thoughts lately, mostly leaning towards jealousy. Whether it’d be a relationship that i don’t have, or a material thing. I then begin to think as to what is it that I have. And obviously, the answer is that I have none of those things that I wish I had, that relationship or that material thing. All I have are goals. A mission, and work ethic. A willingness to bust my behind everyday and do whatever it takes to get to my goals. I understand that nothing is handed to anyone and only through hard work and sacrifice you will get to where you want to be in life.&lt;/p&gt;

&lt;p&gt;Around the same time, I came across this video by Elliot Hulse:&lt;/p&gt;

&lt;iframe style=&quot;padding-bottom: 20px;&quot; width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/r4RgAlz2pmM&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;It couldn’t have come at a better time as I was feeling a bit down. It talks about man’s mission-driven mentality. That you must not deter from your path no matter what. In the video, he’s giving advice to a guy who’s girlfriend wants him to go in a different direction than the one he wants to pursue. Things are a little different in my case, as I already have a goal in mind. I just need to execute.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Resuming TDD with Python</title>
   <link href="http://danielcodes.github.io/2016/01/12/resuming-python/"/>
   <updated>2016-01-12T00:00:00-05:00</updated>
   <id>http://danielcodes.github.io/2016/01/12/resuming-python</id>
   <content type="html">&lt;p&gt;I am taking a small detour from learning Javascript. Reason being that there is still some unfinished Python business. I got the wake up call from watching this &lt;a href=&quot;https://youtu.be/z_ESakf05PQ&quot;&gt;small clip&lt;/a&gt;. The point is you can’t start something and not finish it. You want to…&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Always be closing&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This fall semester I was tasked with learning and developing an application with Django, and do it in a Test-Driven manner if possible. This was hard, especially since my first tutorial on Django was &lt;a href=&quot;http://www.tangowithdjango.com/&quot;&gt;Tango with Django&lt;/a&gt;. As good as this tutorial was at teaching me the workflow for developing my first Django application, I still didn’t know a thing about testing (it was only touched on very briefly in one of the later chapters). Like any other curious programmer, I consulted the web. After a few searches, I found &lt;a href=&quot;http://chimera.labs.oreilly.com/books/1234000000754/index.html&quot;&gt;Test-Driven Development with Python&lt;/a&gt;. This was the perfect solution for my woes, I had found &lt;strong&gt;THE MANUAL&lt;/strong&gt; on how to get started with building an application on a test-first basis. I quickly went through the first 6 chapters, doing one chapter a day. With this I was able to dip my toes into TDD and use the code as reference for my &lt;a href=&quot;https://bitbucket.org/danielcodes/pipeline_monitor&quot;&gt;class project&lt;/a&gt;. However, I would be stuck on this chapter for a month or so since school things would take priority.&lt;/p&gt;

&lt;p&gt;Fast foward a bit (school ended), I was still stuck on Chapter 8 of the tutorial. This chapter covered deployment, the requirements included a server and a domain name. I got mine from the &lt;a href=&quot;https://education.github.com/pack&quot;&gt;GitHub Student Package&lt;/a&gt;, both were being used to serve my class project and it needed to stay up for the professor to check that it was “live”. I waited until I received my grade and finally unhooked the domain name and destroyed the droplet. It was time to continue this TDD with Python tutorial. You can check my progress &lt;a href=&quot;https://github.com/danielcodes/superlists&quot;&gt;here&lt;/a&gt;. Currently &lt;a href=&quot;http://danielchia.me/&quot;&gt;live&lt;/a&gt;! :)&lt;/p&gt;

&lt;p&gt;It just leaves a bad taste to leave things hanging, so it feels good to finally get this tutorial rolling again. I’m learning a ton. While I’m at it, I also solidifying my Python knowledge through this &lt;a href=&quot;https://www.pluralsight.com/courses/python-fundamentals&quot;&gt;Pluralsight course&lt;/a&gt;. The learning never stops.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;TL;DR&lt;/strong&gt; Wrapping up TDD with Python, and learning more Python on Pluralsight&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Thinkpad saves the day</title>
   <link href="http://danielcodes.github.io/2016/01/02/my-setup/"/>
   <updated>2016-01-02T00:00:00-05:00</updated>
   <id>http://danielcodes.github.io/2016/01/02/my-setup</id>
   <content type="html">&lt;p&gt;The first laptop I bought, a &lt;a href=&quot;http://www.cnet.com/products/lenovo-y40-70-laptop-59423030-black-doorbuster-4th-generation-intel-core-i7-4510u-2-00ghz-1600-mhz-4mb/specs/&quot;&gt;Lenovo Y40&lt;/a&gt;, turned out to be horrible disappointment. From a keyboard that I didn’t like, a screen resolution that sucked and to top things off the battery died on me after 5 months of usage. It didn’t completely die on me, but the darn machine would not work unless it was plugged in. Rendering my laptop’s portability useless, as everytime I’d need ot use it, boot up was necessary. I sent in the laptop since it was still under warranty but I was still in need of a laptop for my coding needs as school was already in session.&lt;/p&gt;

&lt;p&gt;I first resorted to borrowing a friend’s tiny notebook. It was a really tiny machine with Ubuntu on it, ultimately the laptop’s keyboard was too small and the fan noise was irritable enough to keep me from using it. But I’d found something cool, that Linux could run on machines with minimal specs!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/laptop/screen.jpg&quot; alt=&quot;Screen&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I started looking around for cheap computer options, and eventually after much fishing, chose to buy a used ThinkPad T420. You can find these &lt;a href=&quot;http://www.ebay.com/sch/i.html?_from=R40&amp;amp;_trksid=p2050601.m570.l1311.R1.TR12.TRC2.A0.H0.Xthinkpad+t.TRS0&amp;amp;_nkw=thinkpad+t420&amp;amp;_sacat=0&quot;&gt;under 200 on ebay&lt;/a&gt;. I coughed up a tiny bit more to get one that wasn’t too beat up. The specs were decent, i5, 250GB storage and 4GB RAM, more than enough for any Linux OS. After receiving the computer, I instantly liked it a lot more than the being-repaired Y40. The screen was still mediocre but the keyboard made a world’s difference. One thing that I can’t stand is having a shortened right SHIFT key. Exactly what the Y40 had, and to add onto the bad design, the keys had the depth of about a nanometer. This ThinkPad had the old school IBM keyboards, it felt clicky, and the right SHIFT was not shortened. The only downside is that, it is literally a brick to carry around.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/laptop/keyboard.jpg&quot; alt=&quot;Keyboard&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Soon after, a friend helped me install Linux on it, specifically &lt;a href=&quot;https://ubuntugnome.org/&quot;&gt;Ubuntu-GNOME&lt;/a&gt;. It felt good to finally work in this OS after many failed attempts to get it on VirtualBox. Not that I failed, the VM’s ran so slow (2 - 3 second delays), that it was pretty unbearable so I gave up on it. Then I found about Vagrant + Cygwin, which initially cost me a lot of grief (it lost my VM at some point). But I did have Linux-y tools for a brief period of time (troubled times with symlinks and shared folders).&lt;/p&gt;

&lt;p&gt;I really can’t emphasize how good it is once you make the switch to a Linux OS. I’m being biased here, as I’ve always wanted this environment where I can just do all my work in a terminal. But if you’re a developer or an aspiring programmer, definitely try it out this set up if you have 200 bucks to spare.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;TL;DR&lt;/strong&gt; Don’t be fooled by a laptop’s specs. If you just want to program, buy a cheap Thinkpad and throw Linux on it. Or get a Mac if you can afford it.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/laptop/cover.jpg&quot; alt=&quot;Cover&quot; /&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Javascript Bootcamp</title>
   <link href="http://danielcodes.github.io/2015/12/29/js-bootcamp/"/>
   <updated>2015-12-29T00:00:00-05:00</updated>
   <id>http://danielcodes.github.io/2015/12/29/js-bootcamp</id>
   <content type="html">&lt;p&gt;Right after my finals ended I thought about how to maximize my productivity during this upcoming winter break. I started reading articles on Medium, about the latest programming craze. Of course, it turned out to be Javascript. Although I’ve dabbed into the language, can’t say that I have full understanding of it. This left a bad taste whenever I’d have to write Javascript. I read The Good Parts by Douglas Crockford, some bits resonated while others just seemed too dense. What really got the ball rolling was this &lt;a href=&quot;https://medium.com/@_cmdv_/i-want-to-learn-javascript-in-2015-e96cd85ad225#.hcraa63br&quot;&gt;post&lt;/a&gt;. Next I started the You-Dont-Know-JS series. And after having finished the first two installments, I have to say that the style of teaching is very enjoyable and I am slowly uncovering Javascript. Anything that we can’t comprehend creates frustration, but if you have an understanding of things, there isn’t such problem.&lt;/p&gt;

&lt;p&gt;Then, by some crazy/lucky occurrence, I was on the Javascript subreddit and found that these books were offered in video form. However, they were offered from sites such as Frontend Masters and Pluralsight, both of which required a paid subscription. Luckily, one of the comments pointed to the &lt;a href=&quot;https://www.visualstudio.com/en-us/products/visual-studio-dev-essentials-vs.aspx&quot;&gt;Visual Studio Dev Essentials&lt;/a&gt; site, which gave a free 6-month subscription to Pluralsight. Of course, I signed up right away.&lt;/p&gt;

&lt;p&gt;Pluralsight not only has the YDKJS’s author videos but also a plethora of anything software related. I felt like I hit the jackpot. This is the perfect opportunity for me since I’ve been wanting to learn all things Javascript, and the tutorials seem legit enough. Now it’s only a matter of creating a sane schedule where I can slowly chip at the content everyday.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>An unhealthy amount of screen time</title>
   <link href="http://danielcodes.github.io/2015/12/25/screen-time/"/>
   <updated>2015-12-25T00:00:00-05:00</updated>
   <id>http://danielcodes.github.io/2015/12/25/screen-time</id>
   <content type="html">&lt;p&gt;It’s Christmas morning, so Merry Christmas!&lt;/p&gt;

&lt;p&gt;Today I want to share my insight on eye strain. I fully knew this, that before committing myself to become a software developer, that I’d have to spend endless time in front of computer. Although I’ve been trying methods here and there to manage this unhealthy, almost unavoidable habit, I always seem to break right back in. The bad habit is to sit in front of a computer for a solid 2-3 hours. This adds up if it’s happening on a daily basis (which it is).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/eye_strain.jpg&quot; alt=&quot;Patrick&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I’ve always had the thought of eye health in the back of my mind, but it wasn’t until recently that it hit me, with a vengeance. Of course, it happened during finals week. For the past week, I’ve spent an insane amonut of time in front of the screen. I was mildly aware until I took a look in the mirror and saw how bad my eyes looked, they were bloodshot. I looked like Patrick. To make things worse, I started rubbing them and this is a no-no since it’ll make it itch more and thus continue the vicious cycle. Since the semester is over, and I didn’t feel like kicking back and rather learn all of the things that I’ve been wanting to learn. This led to more computer time, so the eye strain symptoms have started again.&lt;/p&gt;

&lt;p&gt;This is a serious problem, if my eyes are bad how am I supposed write code? From now on, I’ll be prioritizing my eye health. My plan is to have 1 hour bursts of productivity and then taking 10-15 minute breaks.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>On using Tmux</title>
   <link href="http://danielcodes.github.io/2015/12/16/tmux-setup/"/>
   <updated>2015-12-16T00:00:00-05:00</updated>
   <id>http://danielcodes.github.io/2015/12/16/tmux-setup</id>
   <content type="html">&lt;h4 id=&quot;update&quot;&gt;Update&lt;/h4&gt;

&lt;h6 id=&quot;scrollbar-locked-when-using-tmux&quot;&gt;01/12/16 - Scrollbar locked when using tmux&lt;/h6&gt;

&lt;hr /&gt;

&lt;p&gt;I’ve been wanting to write this one for a while now. This summer, I got learn two very exciting tools, &lt;strong&gt;Vim&lt;/strong&gt; an &lt;strong&gt;Tmux&lt;/strong&gt;. These two are a must-have for any terminal junkie and together they’ve taken my workflow to a whole new level. Although tmux has some extended functionality, in this post I am going to focus on how I personally use it. Also, I am going to assume that you’ve installed the tool on your machine and know how to fire it up. Ok, onto the big question, what do you customize?&lt;/p&gt;

&lt;h3 id=&quot;changing-the-prefix&quot;&gt;Changing the prefix&lt;/h3&gt;

&lt;p&gt;The first thing you ought to do is change the pesky default prefix mapping, &lt;strong&gt;CTRL+b&lt;/strong&gt;. To do this, first create your &lt;strong&gt;~/.tmux.conf&lt;/strong&gt; file, this file allows you to configure tmux settings to your liking. In there, add:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;#prefix to ctrl+a
unbind C-b
set -g prefix C-a 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;However, your pinky finger still has to travel a mile to get to that CTRL key at the bottom left. To fix this, I’d recommend looking into your system and changing the &lt;strong&gt;Caps Lock&lt;/strong&gt; key mapping to &lt;strong&gt;CTRL&lt;/strong&gt;. I have Ubuntu-Gnome, and it came with a nice little piece of software called Tweak Tool, here I was able to turn my Caps Lock key into CTRL.&lt;/p&gt;

&lt;h3 id=&quot;refreshing-the-tmuxconf-file&quot;&gt;Refreshing the .tmux.conf file&lt;/h3&gt;
&lt;p&gt;Next, you gotta know how to refresh these updates that you’re adding. Usually, it is done by CTRL+a followed by :, then on the prompt you type,&lt;/p&gt;

&lt;p&gt;&lt;code&gt;:source-file ~/.tmux.conf&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;but this is cumbersome and hard to remember, instead add:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;#reload of the config file
unbind r
bind r source-file ~/.tmux.conf
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;this will allow you to refresh with CTRL+a + r.&lt;/p&gt;

&lt;p&gt;You can test this by changing window tab colors on the status bar, add,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;#highlight current window
set-window-option -g window-status-current-bg white 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;try out different colors and refresh with CTRL+a + r.&lt;/p&gt;

&lt;h3 id=&quot;pane-splitting&quot;&gt;Pane Splitting&lt;/h3&gt;

&lt;p&gt;Now that we have much nicer prefix &lt;strong&gt;CTRL+a&lt;/strong&gt;, what comes next is pane splitting. The defaults are set to “ (vertical) and % (horizontal). These bindings are hard to memorize and not so intuitive, let’s change them. In your &lt;em&gt;.tmux.conf&lt;/em&gt; add:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;#intuitive pane splitting
bind | split-window -h -c &quot;#{pane_current_path}&quot;
bind - split-window -v -c &quot;#{pane_current_path}&quot;
unbind &#39;&quot;&#39;
unbind %
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The first line is saying to use the &lt;code&gt;|&lt;/code&gt; key to do a horizontal split. The &lt;code&gt;-c &quot;#{pane_current_path}&quot;&lt;/code&gt; part makes it so that the split pane remains in the current path where you split from. Imagine being into directory that’s 10 levels down, and having to cd there again when you create a new pane. You get the picture.&lt;/p&gt;

&lt;h3 id=&quot;moving-between-panes&quot;&gt;Moving between panes&lt;/h3&gt;
&lt;p&gt;By now, you can split panes, but how do you move aronud? One way to go about it, is to hit the prefix key followed by an arrow key movement. This is sloppy though, as you have to move your hand down to the arrow keys. A better way is the following, add:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;#quick pane cycling, prefix + Ctrl-a 
unbind ^A
bind ^A select-pane -t :.+
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;with this, you can move from pane to pane by hitting your prefix twice.
If you mapped your control key to CAPS LOCK, you can hit the prefix once, keep your pinky on CAPS and press &lt;em&gt;a&lt;/em&gt; again. Ah, so, so, efficient.&lt;/p&gt;

&lt;p&gt;PS. I found this tip &lt;a href=&quot;https://robots.thoughtbot.com/a-tmux-crash-course&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If by any chance, a pane crashes on you, you can close it with &lt;strong&gt;prefix&lt;/strong&gt; + x.&lt;/p&gt;

&lt;h3 id=&quot;zooming-in&quot;&gt;Zooming in&lt;/h3&gt;
&lt;p&gt;One final feature that I want to talk about is zoom. Having multiple panes is great and all but truth is most of the time your focus is only one, the pane in which you’re writing code. Tmux has a neat little feature that helps with this problem, do &lt;strong&gt;CTRL+a + z&lt;/strong&gt;. This command, full screens the current pane, to exit, just use the same command.&lt;/p&gt;

&lt;h3 id=&quot;scrolling---updated-011216&quot;&gt;Scrolling - updated 01/12/16&lt;/h3&gt;
&lt;p&gt;I noticed a small issue with Tmux when I first started using it. It locked up my scrollbar. At first I didn’t think much of the issue. But ever since failing tests started giving error messages that cover the screen and more, it has become imperative for me to get this functionality back. This is solved with the following lines:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;#allows scrolling
setw -g mode-mouse on
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;TL;DL My .tmux.conf is &lt;a href=&quot;https://gist.github.com/danielcodes/ea6ee30d2ff032421b2e&quot;&gt;here&lt;/a&gt;. Leave me a comment if I can improve on anything.&lt;/p&gt;

&lt;p&gt;Hope you found these helpful, and happy tmuxing !&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Calm and health</title>
   <link href="http://danielcodes.github.io/2015/12/15/calm-and-balance/"/>
   <updated>2015-12-15T00:00:00-05:00</updated>
   <id>http://danielcodes.github.io/2015/12/15/calm-and-balance</id>
   <content type="html">&lt;p&gt;It’s been one heck of a semester. From thinking, ‘oh it’s going to be fun learning this and that’ to ‘shit, I have to get this and that done’, see the difference, not much fun. While I underestimated the semester’s course load, I’d say that I’ve improved in other aspects. Those being controlling my temper when things go wrong and maintaining a healthy lifestyle.&lt;/p&gt;

&lt;p&gt;I’d like to address the first, my temper. Ever since I can remember i’ve always been a hot-head. I would always act in the spur of the moment, and deal with consequences after. This, of course, always got me into lots of trouble. Now, how does this relate to the present? Well, previously I ranted about being in a leadership position and having a hard time getting others to do their part. Although it’s been a frustrating experience, I have learned that nothing good comes out of agitating myself further and that I have to deal with things in a calm manner and try not to break walls.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/desk_flip.jpg&quot; alt=&quot;Fliptable&quot; /&gt;&lt;/p&gt;

&lt;p&gt;While learning to maintain calm in situations of high stress, I have also learned the importance of my health. It hasn’t been the best year for me in terms of health. I got a severe injury that has prevented me from going into the gym to lift weights and will remain that way for the next couple of months. As much as this sucks, I can’t do anything. Maintaining good health is crucial to suceed in others aspects of life. Just as easily as it has taken me out of the weight room, it can do so as well for everyday tasks that I take for granted. Health comes above all else.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Leadership is hard</title>
   <link href="http://danielcodes.github.io/2015/12/03/leadership/"/>
   <updated>2015-12-03T00:00:00-05:00</updated>
   <id>http://danielcodes.github.io/2015/12/03/leadership</id>
   <content type="html">&lt;p&gt;This semester I had to partake in 2 group projects. Both of which I ended up taking leadership roles in, AKA Project Management. Up until now, other than writing I haven’t really collaborated much on any other type of project. For this 2 projects, one of them involved mostly writing and the second was software collaboration. I can’t say that it has been easy nor I’ve done a great job at it, all I can say is that is tough and much improvement is needed.&lt;/p&gt;

&lt;p&gt;It’s tough because being a leader means that you have to lead by example. What do I mean? If the leader (me) works hard, the rest of the group will follow right? This doesn’t necessarily work all the time as some people tend to take advantage and decide to not contribute at all, knowing that you’ll be there to pick up the slack. But I might’ve missed something here, besides showing yourself as capable. That isn’t enough, you have to delegate tasks. These are the kind of people that won’t do work unless you nudge them too. Yeah, it’s extremely annoying. But to save yourself some grief and avoid overworking yourself, you have to be assertive and demand work from others as it is their responsibility just as much as it is yours.&lt;/p&gt;

&lt;p&gt;Other things that I’ve noticed are that as a leader, you need to provide a sense of direction. This is very important if you have very passive team members whom will solely rely on you to provide them with work to do. If it was up to me, I’d take initiative and start improvising things on my own. Sadly, not everyone shares the same mindset. You’re stunt when somebody asks, “what do I do?”. And even after you feel that you have a grasp on direction, an open mind is necessary because feedback is extremely important as the project develops. Your teammates might notice something amiss, and you have to take that into account and not ignore them, like I’ve done.&lt;/p&gt;

&lt;p&gt;It has been a tough experience, and one that isn’t totally over. As bad as it sounds, I still believe that I’m capable of leadership and it is just something that I need to keep working on. I gotta take in everything calmly and not just rage when everything goes wrong and out of place.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Being dumb, painful Jekyll setup</title>
   <link href="http://danielcodes.github.io/2015/11/27/being-dumb/"/>
   <updated>2015-11-27T00:00:00-05:00</updated>
   <id>http://danielcodes.github.io/2015/11/27/being-dumb</id>
   <content type="html">&lt;p&gt;Incredibly annoyed that it took me so long to set things up with jekyll here.
I began customization through the index page, making edits to the html and every darn time I restarted the server, the changes would never go through. It was by chance that I decided to mess with the &lt;strong&gt;_config.yml&lt;/strong&gt; file and found that some parameters defined here were being passed to the index. This meant that no matter how many times I changed the html itself, it would just get replaced, every single time. I stupidly googled “jekyll not saving changes” too. All I can say is…&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/facepalm.jpg&quot; alt=&quot;Facepalm&quot; /&gt;&lt;/p&gt;
</content>
 </entry>
 

</feed>
