<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>Daniel Chia</title>
 <link href="http://danielcodes.github.io/atom.xml" rel="self"/>
 <link href="http://danielcodes.github.io/"/>
 <updated>2018-03-18T16:09:03-04:00</updated>
 <id>http://danielcodes.github.io</id>
 <author>
   <name>Daniel Chia</name>
   <email>danielarmandochia@gmail.com</email>
 </author>

 
 <entry>
   <title>Creating a Voting App with create-react-app and Django</title>
   <link href="http://danielcodes.github.io/2018/03/16/deploying-pollster/"/>
   <updated>2018-03-16T00:00:00-04:00</updated>
   <id>http://danielcodes.github.io/2018/03/16/deploying-pollster</id>
   <content type="html">&lt;p&gt;The latest project that I worked on was &lt;strong&gt;Pollster&lt;/strong&gt;, this is the Voting App in Free Code Camp’s curriculumn. This was a good chance for me to build a project from the ground up and play with technologies that I had been eye balling for a while (mostly Redux). This also meant deploying the application. Check Github repo &lt;a href=&quot;https://github.com/danielcodes/voting_app&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Here are a few pictures:&lt;/p&gt;

&lt;ul class=&quot;bxslider&quot;&gt;
	&lt;li&gt;&lt;img src=&quot;/public/img/pollster/pollster_1.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
	&lt;li&gt;&lt;img src=&quot;/public/img/pollster/pollster_2.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
	&lt;li&gt;&lt;img src=&quot;/public/img/pollster/pollster_3.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The stack that I chose to use was:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;React + Redux&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Django&lt;/strong&gt; (especifically &lt;strong&gt;Django Rest Framework&lt;/strong&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I had used React for several side projects but had yet to integrate Redux for state management. This was a good place to start. After reading through the official docs and several tutorials, I settled on using the model provided in &lt;a href=&quot;http://jasonwatmore.com/post/2017/12/07/react-redux-jwt-authentication-tutorial-example&quot;&gt;this tutorial&lt;/a&gt;. However, after getting started I soon ran into trouble as adding CSS required modifying the webpack configuration. Also, I would need to configure bundling the app to be production ready. Due to this, I migrated most of the app to &lt;a href=&quot;https://github.com/facebook/create-react-app&quot;&gt;create-react-app&lt;/a&gt;. Using CRA, I saved myself some configuration steps and took the good bits from the other tutorial.&lt;/p&gt;

&lt;p&gt;From here on, developing the application took the following workflow:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Create a page and decide on what was the data needed&lt;/li&gt;
  &lt;li&gt;Create the &lt;strong&gt;constants&lt;/strong&gt; for the actions&lt;/li&gt;
  &lt;li&gt;Define the &lt;strong&gt;actions&lt;/strong&gt; that would call the services, along with request, success and failure functions&lt;/li&gt;
  &lt;li&gt;Define &lt;strong&gt;services&lt;/strong&gt;, which make the actual http calls to retrieve data handled in the actions&lt;/li&gt;
  &lt;li&gt;Define the &lt;strong&gt;reducers&lt;/strong&gt; that will update the &lt;strong&gt;new state&lt;/strong&gt; accordingly&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This was actually a pretty tedious process. I guess that’s the Redux way of things. Also, if that made zero sense, take a look at the tutorial listed above.&lt;/p&gt;

&lt;p&gt;Before starting any work on the above, I had hastily set up an API using &lt;strong&gt;Django Rest Framework&lt;/strong&gt; using viewsets and routers. By creating a few models and their serializers, you can have a full CRUD API with very few lines of code.&lt;/p&gt;

&lt;p&gt;With this configuration, I had the following routes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;/questions&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;/questions/_id&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;/choices&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;/choices/_id&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;/questions/_id/choices&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;/questions/user/user_id&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The first four were given for free, the last two I had to define on my own. Besides this, I used the &lt;code&gt;djoser&lt;/code&gt; package to provide &lt;strong&gt;JWT authentication&lt;/strong&gt;. Stitching this API and my frontend, I had put together a barebones application.&lt;/p&gt;

&lt;p&gt;However, for certain user stories, I needed to secure parts of the application (ie. only auth users can create polls, only owners can delete questions, etc). For this, I needed to add certain permissions to the application and having the viewsets abstracting a lot of the &lt;code&gt;HTTP methods&lt;/code&gt; for each route, I didn’t have the finer control that I needed. I ended up having to rewrite the routes. I used this chance to write a full test suite for each of the routes, following &lt;a href=&quot;https://realpython.com/blog/python/test-driven-development-of-a-django-restful-api/&quot;&gt;this guide&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;requests-in-development&quot;&gt;Requests in development&lt;/h3&gt;

&lt;p&gt;While developing the app, CRA has this &lt;code&gt;proxy&lt;/code&gt; key that you can throw in &lt;code&gt;package.json&lt;/code&gt;. This basically tells webpack to proxy requests to the specified port. For my Django API being served on port &lt;code&gt;8000&lt;/code&gt;, the setting looked like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&#39;proxy&#39;: &#39;http://localhost:8000&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;preparing-for-production&quot;&gt;Preparing for production&lt;/h3&gt;

&lt;p&gt;I had worked on the app for a week and a half before I had completed all the &lt;a href=&quot;https://www.freecodecamp.org/challenges/build-a-voting-app&quot;&gt;user stories&lt;/a&gt;. Naturally the next step was deploying the application. Here is where I was stumped for some time. I asked, &lt;strong&gt;How would I mimic this development set up in production?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I proceded by first creating the build bundle with &lt;code&gt;yarn build&lt;/code&gt;, then to serve the static files, I ran (inside the &lt;code&gt;build&lt;/code&gt; directory)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;python -m http.server 3000
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here’s where the app broke, requests were not going through as there was no proxy redirecting the requests.&lt;/p&gt;

&lt;p&gt;This followed a bit of a research period to find out how I could deploy this application. There weren’t any tutorials with what I was looking for, which was deploying an SPA with a REST API, both sitting on the same machine. However, when I took a closer look, there were tutorials for doing these things separately. I found the following two:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://medium.com/@timmykko/deploying-create-react-app-with-nginx-and-ubuntu-e6fe83c5e9e7&quot;&gt;Deploying create-react-app with Nginx and Ubuntu&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://simpleisbetterthancomplex.com/tutorial/2016/10/14/how-to-deploy-to-digital-ocean.html&quot;&gt;How to Deploy a Django Application to Digital Ocean&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The key to deploying the application was mixing these two tutorials together. Have Nginx serve the static files from the &lt;code&gt;/build&lt;/code&gt; directory created by &lt;code&gt;yarn build&lt;/code&gt; and proxy requests to the port where the Django application was being served. There was only one thing left to do, try it.&lt;/p&gt;

&lt;h3 id=&quot;taking-action&quot;&gt;Taking action&lt;/h3&gt;

&lt;p&gt;I started by first deploying my Django REST API as that was the tougher of the two. I started by first provisioning a $5 linux box from Linode (had some leftover credits). I followed these two guides to set up my server:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://linode.com/docs/getting-started/&quot;&gt;Getting started with Linode&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://linode.com/docs/security/securing-your-server/&quot;&gt;How to secure your server&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Once this was done, I followed the tutorial for deploying a Django app. The steps looked like this:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Update the machine (&lt;code&gt;apt-get update and upgrade&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;Install system dependencies (&lt;strong&gt;PostgreSQL&lt;/strong&gt;, &lt;strong&gt;Nginx&lt;/strong&gt;, &lt;strong&gt;Supervisor&lt;/strong&gt;, &lt;strong&gt;Python packages&lt;/strong&gt;, etc)&lt;/li&gt;
  &lt;li&gt;Create the &lt;strong&gt;python virtualenv&lt;/strong&gt; and install the app dependencies&lt;/li&gt;
  &lt;li&gt;Configure &lt;strong&gt;Gunicorn&lt;/strong&gt; to serve the application&lt;/li&gt;
  &lt;li&gt;Configure &lt;strong&gt;Supervisor&lt;/strong&gt; to run the Gunicorn server&lt;/li&gt;
  &lt;li&gt;Configure &lt;strong&gt;Nginx&lt;/strong&gt; to proxy requests to Gunicorn&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;adding-in-the-frontend&quot;&gt;Adding in the frontend&lt;/h3&gt;

&lt;p&gt;Once the Django application was running, now I needed to serve the static files from the &lt;code&gt;build&lt;/code&gt; directory. Changes were made to the &lt;a href=&quot;https://simpleisbetterthancomplex.com/tutorial/2016/10/14/how-to-deploy-to-digital-ocean.html#configure-nginx&quot;&gt;original Nginx configuration file&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To serve the static files from &lt;code&gt;build&lt;/code&gt;, these two lines were added&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;root /home/daniel/voting_app/client/build;
index index.html index.htm;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Another change was that now the &lt;code&gt;/&lt;/code&gt; route would serve &lt;code&gt;index.html&lt;/code&gt; not proxy to the Django app&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;location / {
  try_files $uri /index.html;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now the last change that was needed was to proxy the http calls to the Django app&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;location /api {
  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
  proxy_set_header Host $http_host;
  proxy_redirect off;
  proxy_pass http://app_server;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Doing these 3 modifications gave me the behaviour I wanted, to serve the &lt;code&gt;build/&lt;/code&gt; bundle created by CRA and proxy requests to Gunicorn which was serving the REST API. To see the final Nginx configuration check &lt;a href=&quot;https://gist.github.com/danielcodes/8e6ee3eea155d9e6bcd191e8f7bbab6d&quot;&gt;this gist&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;mistakes-i-made-attempting-this&quot;&gt;Mistakes I made attempting this&lt;/h3&gt;

&lt;p&gt;This procedure was not as smooth of a transition as I described above. I am going to list some parts that I had to wrestle with before everything came together.&lt;/p&gt;

&lt;h5 id=&quot;venv-folder-placement&quot;&gt;venv folder placement&lt;/h5&gt;

&lt;p&gt;While setting up Gunicorn, I initially had my &lt;code&gt;venv&lt;/code&gt; directory set up two directories above my Django app directory. This caused all types of &lt;code&gt;file not found&lt;/code&gt; errors when I accessed the directories with &lt;code&gt;../../venv/activate&lt;/code&gt; on the Gunicorn configuration file.&lt;/p&gt;

&lt;p&gt;To avoid this, place the &lt;code&gt;venv&lt;/code&gt; only a level above your application directory. In my case this looked like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
├── client
├── project
└── venv
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&quot;make-your-api-routes-distinct&quot;&gt;Make your API routes distinct&lt;/h5&gt;

&lt;p&gt;For the frontend, React Router takes care of the routing. In the backend, it is the configured Django urls. Not thinking ahead, I had created conflicting urls, where I had a route for &lt;code&gt;/questions&lt;/code&gt; in both React Router and Django. Navigating through the site to get to &lt;code&gt;/questions&lt;/code&gt; worked fine but if the url was punched in through the browser, I would end up with the Django page serving the JSON data.&lt;/p&gt;

&lt;p&gt;To resolve this, I prefixed all Django urls with &lt;code&gt;/api&lt;/code&gt;. Now the routes set up by React Router and the Django urls did not conflict.&lt;/p&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;Overall, a pretty fun experience. Deployment still isn’t the easiest thing to do but I’m happy with the progress.&lt;/p&gt;

&lt;h3 id=&quot;tldr&quot;&gt;TL;DR&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Deploying a create-react-app SPA and a REST API in the same machine.&lt;/li&gt;
  &lt;li&gt;Use Nginx to serve the static files from your SPA build bundle and proxy the requests to the server serving the REST API.&lt;/li&gt;
&lt;/ul&gt;

</content>
 </entry>
 
 <entry>
   <title>Building a Simon game</title>
   <link href="http://danielcodes.github.io/2017/02/25/simon-game/"/>
   <updated>2017-02-25T00:00:00-05:00</updated>
   <id>http://danielcodes.github.io/2017/02/25/simon-game</id>
   <content type="html">&lt;p&gt;After finishing the Tic Tac Toe game, I set out to finish the last Front End project from Free Code Camp, a &lt;a href=&quot;https://www.freecodecamp.com/challenges/build-a-simon-game&quot;&gt;Simon Game&lt;/a&gt;. The game consists of 4 buttons, from which a sequence will play. The player’s job is to match that sequence. If you do, the sequence grows, otherwise it plays the same sequence until you pass the current level. Straight forward rules, but I really had no clue how to implement this. The first couple of sessions, I mainly sat down to think about the structure of the game as it had many parts. A little later on, I came up with my first task, which was creating a &lt;code&gt;div&lt;/code&gt; that blinked when it was clicked.&lt;/p&gt;

&lt;h2 id=&quot;first-task---blinking-div&quot;&gt;First task - Blinking div&lt;/h2&gt;

&lt;p&gt;This took much longer to finish than I had liked. Mainly because when I first saw the &lt;a href=&quot;https://facebook.github.io/react/docs/animation.html&quot;&gt;documentation&lt;/a&gt; on the main site regarding animation, I felt a bit overwhelmed. A lot of it seemed pretty abstract and I didn’t have the energy to trudge through all of it. After some digging, I found this neat &lt;a href=&quot;http://unitstep.net/blog/2015/03/03/using-react-animations-to-transition-between-ui-states/&quot;&gt;little tutorial&lt;/a&gt;. It had just what I needed, a blinking &lt;code&gt;div&lt;/code&gt;. Although this article should have been enough to get things going, things didn’t quite click with me as I was still confused about certain areas, specially the CSS bits with &lt;code&gt;enter&lt;/code&gt;, &lt;code&gt;leave&lt;/code&gt; and their active states and so I searched a bit further. I came across this &lt;a href=&quot;https://medium.com/@joethedave/achieving-ui-animations-with-react-the-right-way-562fa8a91935#.q6ofquo9i&quot;&gt;last article&lt;/a&gt; that really put everything into perspective. This included a link to the first thing I should’ve looked at, the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Transitions/Using_CSS_transitions&quot;&gt;animation docs&lt;/a&gt; on MDN.&lt;/p&gt;

&lt;p&gt;If somebody was to start this project, I’d recommend reading the animations docs, followed by the medium article and lastly the tutorial about the blink. Knowing about how transitions work fundamentally will help you grasp the concept, no matter how other APIs are trying to bend things.&lt;/p&gt;

&lt;p&gt;I don’t have an example to show as, after finishing the blink, I did not save a copy and built the rest of the project on top of it. But there is a a link &lt;a href=&quot;http://jsfiddle.net/pchng/17rq3s6d/1/&quot;&gt;here&lt;/a&gt;, which is more or less what I ended up with.&lt;/p&gt;

&lt;p&gt;The main takeaway here is that React handles transitions inside its &lt;code&gt;ReactCSSTransitions&lt;/code&gt; component. You label elements with a &lt;code&gt;key&lt;/code&gt; value and animations will occur when elements with these keys enter or leave the component. The animation was achieved by keeping an array of booleans, and everytime a click occurred this value was toggled, creating a &lt;em&gt;enter or leave&lt;/em&gt; effect activating the blink.&lt;/p&gt;

&lt;p&gt;Ok, that was task one.&lt;/p&gt;

&lt;h2 id=&quot;second-task---playing-a-sequence-of-blinks&quot;&gt;Second task - Playing a sequence of blinks&lt;/h2&gt;

&lt;p&gt;Now, the next step was animating a sequence of blinks. The first thing I tried was this&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;for(var i=0; i&amp;lt;seq.length; i++){
	// component.toggleValues(i)
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When I ran this code, the only blink that played was the last one. This happens because each blink call is overriding the other, not letting the first one finish and thus only the last one plays.
I was stumped on this for a while, mainly because I was looking in the wrong place to solve a simple timing problem. I was looking at React-motion, a React library for animation. This seemed a bit of an overkill, considering that all I wanted was a sequence of blinks and I already had the blink. But curious to see if this would solve my problem, I decided to dive in. I read this lengthy &lt;a href=&quot;https://medium.com/@nashvail/a-gentle-introduction-to-react-motion-dc50dd9f2459#.s367bigir&quot;&gt;article&lt;/a&gt;, which built a menu that popped out from a button. As interesting as the topic was, I didn’t need 90% of it. However, I did find the answer to my problem at the end of the article where there was a bit of information on creating the delay for the icons to pop up sequentially. Not a waste of time afterall.&lt;/p&gt;

&lt;p&gt;The Javascript that I was missing was this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// prints 1, 2, 3, 4, 5 in a timely manner
for(var i=1; i&amp;lt;=5; i++){
  setTimeout(function(i){
    return function(){
      console.log(&#39;printing, &#39;, i);
    }
  }(i), i*1000) // immediately executes by calling it with fn(i)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;setTimout&lt;/code&gt; function is used if you want to execute something after an &lt;strong&gt;x&lt;/strong&gt; amount of time. Now, the function benig passed to &lt;code&gt;setTimeout&lt;/code&gt; is returning a function. This is a common JS problem where if we didn’t have this, the values of &lt;code&gt;i&lt;/code&gt; would not freeze and the values printed would all be 6. So to get around it, we pass a function that is executed right away, this returns a function that has each unique &lt;code&gt;i&lt;/code&gt; value.&lt;/p&gt;

&lt;p&gt;And this was exactly was I needed to perform my sequence of blinks, mainly just replacing the print statement with the bit of code that activated the blink.&lt;/p&gt;

&lt;p&gt;From this point on, it was quite simple to develop the game further. I was able to add a level up, after the user entered a correct sequence and reset the level on bad input. But, I wasn’t done. The sequence could play and all, but the user had an infinite amount of time to enter the correct sequence. What’s the fun if you aren’t being timed? That brought me to my third task, a timer.&lt;/p&gt;

&lt;h2 id=&quot;third-task---creating-a-timer-for-the-user&quot;&gt;Third task - Creating a timer for the user&lt;/h2&gt;

&lt;p&gt;Although I had implemented a timer before for the previous project, a &lt;a href=&quot;http://codepen.io/danielcodes/full/GNQLGX/&quot;&gt;Pomodoro clock&lt;/a&gt;. When it came time to implement it again, I delayed it for as long as possible. Mainly because when I had put that code together, I didn’t plan on looking back at it, funny how things turn out. It was time to look at that mess.&lt;/p&gt;

&lt;p&gt;From looking over the code, the timer was implemented in this manner:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function getRemainingTime(endtime){
  var t = Date.parse(endtime) - Date.parse(new Date());
  var seconds = Math.floor((t/1000) % 60);
  var minutes = Math.floor((t/1000/60) % 60);
  
  return {
    &#39;total&#39;: t,
    &#39;minutes&#39;: minutes,
    &#39;seconds&#39;: seconds   
  }
}

var endtime = new Date();
endtime.setSeconds(endtime.getSeconds() + 10);

var timer = setInterval(function(){
  var t = getRemainingTime(endtime);
  console.log(&#39;counting &#39;, t.total, t.minutes, t.seconds);
  
  if(t.total == 0){
    console.log(&#39;Finished counting&#39;);
    clearInterval(timer);
  }
}, 1000);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The way this works is by first creating a &lt;code&gt;deadline&lt;/code&gt; (ie. 10 seconds from now). The next bit that runs is our &lt;code&gt;setInterval&lt;/code&gt;, what this does is run the function inside for an &lt;strong&gt;x&lt;/strong&gt; delay which in this case is set to 1000 ms. So here there will be an initial delay before our function executes, by then &lt;code&gt;t&lt;/code&gt; will start counting down from 9. And this function will be called over and over until our timer is exhausted down to 0, which is when it’ll stop.
This bit of code is taken from &lt;a href=&quot;https://www.sitepoint.com/build-javascript-countdown-timer-no-dependencies/&quot;&gt;here&lt;/a&gt;, so I highly suggest you take a look as it does a much better job at explaining timers than I do.&lt;/p&gt;

&lt;p&gt;After re-reading and understanding this timer mechanism, I proceeded to add this to the game.&lt;/p&gt;

&lt;p&gt;The flow of the game now was:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Play sequence, following it start a timer that awaits user input&lt;/li&gt;
  &lt;li&gt;If timer runs out, replay the the step above&lt;/li&gt;
  &lt;li&gt;The other &lt;strong&gt;two cases&lt;/strong&gt; that affect timer are on level up, where a new step is added to the sequence and then we go back to &lt;strong&gt;step 1&lt;/strong&gt; and on wrong input where we go straight back to &lt;strong&gt;step 1&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;While doing this, I discovered I needed to disable the ability to click the blinks at several steps, otherwise there are some craaazy bugs. Race conditions and what not, very ugly stuff. The disables were placed on three places, during sequence animation, after wrong input and after level up. This was done by setting the CSS property of &lt;code&gt;pointer-events&lt;/code&gt; to &lt;code&gt;none&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Almost there, the fourth step was adding sound to the clicks.&lt;/p&gt;

&lt;h2 id=&quot;fourth-task---adding-the-sound&quot;&gt;Fourth task - Adding the sound&lt;/h2&gt;

&lt;p&gt;Several sounds were given to add to each blinker. Given that they were links, naturally my thought was that I needed to use &lt;code&gt;AJAX&lt;/code&gt; to retrieve the sounds first, store them and play them when needed. And so, I set off to learn how to do AJAX calls in React. I read &lt;a href=&quot;http://andrewhfarmer.com/react-ajax-best-practices/&quot;&gt;this article&lt;/a&gt; and &lt;a href=&quot;https://daveceddia.com/ajax-requests-in-react/&quot;&gt;this one&lt;/a&gt; too. At the end, I decided to go with &lt;code&gt;axios&lt;/code&gt; as it had an example. But this failed, as I was not able to retrieve the sound data, but it did work for regular JSON format data. This was annoying.&lt;/p&gt;

&lt;p&gt;I remember going home frustrated that day, having my progress halted by a stupid AJAX call. However, the next day I managed to figure it out. The answer came from this &lt;a href=&quot;http://stackoverflow.com/questions/9419263/playing-audio-with-javascript&quot;&gt;StackOverflow question&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// JS code to load and play audio
var audio = new Audio(&#39;audio_file.mp3&#39;);
audio.play();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It turns out that I could just place the source of the mp3 file and the &lt;code&gt;Audio API&lt;/code&gt; would do all the heavy lifting for me. Pretty sweet solution considering the frustration the day prior.&lt;/p&gt;

&lt;p&gt;And with this, most of the logic of my game was done. Here’s what I had after this point:&lt;/p&gt;

&lt;p data-height=&quot;341&quot; data-theme-id=&quot;0&quot; data-slug-hash=&quot;KaMBEm&quot; data-default-tab=&quot;result&quot; data-user=&quot;danielcodes&quot; data-embed-version=&quot;2&quot; data-pen-title=&quot;working simon game&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;http://codepen.io/danielcodes/pen/KaMBEm/&quot;&gt;working simon game&lt;/a&gt; by Daniel Chia (&lt;a href=&quot;http://codepen.io/danielcodes&quot;&gt;@danielcodes&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://production-assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;

&lt;h2 id=&quot;fifth-task---polishing-the-user-interface&quot;&gt;Fifth task - Polishing the User Interface&lt;/h2&gt;

&lt;p&gt;This is always the most dreaded task, ha. In this case, what I needed to do was straight forward. First create the quarters, then create the set of controls and finally wire up everything. Creating the quarters was something new, and was able to do it thanks to &lt;a href=&quot;http://jsfiddle.net/cardeo/8ku6T/&quot;&gt;this JS Fiddle&lt;/a&gt;. The circular control board was a bit more tedious to do as every little aspect of it required custom sizing. This ended up being alot of ID tagging and a lot of repetitive CSS, especially centering, I’ve become really good at centering text and blocks.&lt;/p&gt;

&lt;p&gt;This is the final product:&lt;/p&gt;

&lt;p data-height=&quot;416&quot; data-theme-id=&quot;0&quot; data-slug-hash=&quot;xgrpbw&quot; data-default-tab=&quot;result&quot; data-user=&quot;danielcodes&quot; data-embed-version=&quot;2&quot; data-pen-title=&quot;Simon game&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;http://codepen.io/danielcodes/pen/xgrpbw/&quot;&gt;Simon game&lt;/a&gt; by Daniel Chia (&lt;a href=&quot;http://codepen.io/danielcodes&quot;&gt;@danielcodes&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://production-assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;One of the reasons, why it is a bit oversized is that when I was developing this on my CodePen, I had my browser size set to 75%. I set it up this way because I can see about 10 more lines of code on the editor. I done goofed, but overall it isn’t too bad :).&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;This last Free Code Camp project was one of the toughest for sure. Highly due to the research aspect of it, not knowing how to do many things and oftentimes getting stuck trying to find the answer. But I’m glad that I decided to stick with things and eventually finishing it up. :)&lt;/p&gt;

&lt;p&gt;PS. Here is the &lt;a href=&quot;http://codepen.io/danielcodes/full/xgrpbw/&quot;&gt;full page version&lt;/a&gt;&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Building a Tic Tac Toe game</title>
   <link href="http://danielcodes.github.io/2016/12/30/tic-tac-toe/"/>
   <updated>2016-12-30T00:00:00-05:00</updated>
   <id>http://danielcodes.github.io/2016/12/30/tic-tac-toe</id>
   <content type="html">&lt;p&gt;In the past two weeks, I have been working on a Tic Tac Toe game for Free Code Camp. This one took a couple of sittings as it required me to learn quite a few things. I chose to use React for the project as it is something that I’ve been meaning to learn for the longest time and had some momentum coming in after finishing my Pomodoro Clock in React.&lt;/p&gt;

&lt;p&gt;The user stories for the project were simple:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;I can play a game of Tic Tac Toe with the computer.&lt;/li&gt;
  &lt;li&gt;My game will reset as soon as it’s over so I can play again.&lt;/li&gt;
  &lt;li&gt;I can choose whether I want to play as X or O.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Not too bad, have a choice between X or O, create an AI and reset when the game ends.&lt;/p&gt;

&lt;h2 id=&quot;starting-out&quot;&gt;Starting out&lt;/h2&gt;

&lt;p&gt;The first thing I did was prototype the user interface, which was just a grid. After this, I soon found that I had put together a huge component and didn’t know how to break it up. Also, if I had kept that grid component, each square would need to have an &lt;code&gt;onClick&lt;/code&gt; handle attached to it to display X or O on that square. So soon and things were already starting to look ugly. I needed to break down this HTML. Luckily, I happened to come across the tutorial on &lt;a href=&quot;https://facebook.github.io/react/tutorial/tutorial.html&quot;&gt;React’s main site&lt;/a&gt;, which was a Tic-Tac-Toe game.&lt;/p&gt;

&lt;h2 id=&quot;going-through-the-tutorial&quot;&gt;Going through the tutorial&lt;/h2&gt;

&lt;p&gt;This tutorial was a lot of fun, I highly recommend it. I found the main thing that I needed, which was to break the components apart. They did this by creating several components such as a Game, a Board and a Square. You start small with all the functionality contained in the Square and refactor up. This means the parent component contains the data and passes a function down to the child for it to modify this data. This was the only thing I needed, but there were other goodies in the tutorial, such as creating a history of all the moves and being able to move back and start playing from there.&lt;/p&gt;

&lt;p&gt;After finishing the tutorial, there were additional features that you could implement if you wanted to test your knowledge. Since I wanted to learn, I did them.&lt;/p&gt;

&lt;p data-height=&quot;306&quot; data-theme-id=&quot;0&quot; data-slug-hash=&quot;LbBMyK&quot; data-default-tab=&quot;result&quot; data-user=&quot;danielcodes&quot; data-embed-version=&quot;2&quot; data-pen-title=&quot;Tic Tac Toe new features&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;http://codepen.io/danielcodes/pen/LbBMyK/&quot;&gt;Tic Tac Toe new features&lt;/a&gt; by Daniel Chia (&lt;a href=&quot;http://codepen.io/danielcodes&quot;&gt;@danielcodes&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://production-assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;The most noticeable additions are, bolding the current move, the button to sort the moves and highlighting the winning line.&lt;/p&gt;

&lt;h2 id=&quot;back-to-my-prototype&quot;&gt;Back to my prototype&lt;/h2&gt;

&lt;p&gt;Armed with this new knowledge, I proceeded to add these separated components to my own game. At this point, I thought that I was ready to start looking into creating the AI to play the game.&lt;/p&gt;

&lt;h2 id=&quot;thinking-about-the-ai&quot;&gt;Thinking about the AI&lt;/h2&gt;

&lt;p&gt;The first idea that came to mind to create this AI, was to have the computer capture the center or corner on its first move. From here, look for threats which is when the opposite player has two pieces lined up. A couple of limitations with this approach:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Here, there&#39;s no threat right away, but if it play its move on either of the T spots, it is going to lose.

 |T|O
-----
 |X|T
-----
X| |
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is when I realized that I couldn’t really come up with a few simple checks to solve this problem.
After some research, I found that there was an algorithm that I could specifically use for these kind of turn taking games, &lt;strong&gt;Minimax&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&quot;minimax&quot;&gt;Minimax&lt;/h2&gt;

&lt;p&gt;I got to understand this algorithm from two main sources:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://neverstopbuilding.com/minimax&quot;&gt;Article&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=CwziaVrM_vc&quot;&gt;Video&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The article explains in depth how Minimax works, and the second is a video that actually implements the algorithm, done in &lt;code&gt;C++&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;back-to-my-project&quot;&gt;Back to my project&lt;/h2&gt;

&lt;p&gt;However, even though I understood the concept, I had a bit of trouble getting started on writing the algorithm. The main roadblock was that I needed to extend my two player version to one where I played against the computer. So I went and created a dumb AI that placed a move anywhere on the board. Now, the goal was clear, I just needed to update this one function so it used Minimax to pick the best move instead of the dumb AI.&lt;/p&gt;

&lt;h2 id=&quot;understanding-minimax&quot;&gt;Understanding Minimax&lt;/h2&gt;

&lt;p&gt;Essentially, Minimax is a brute-force algorithm that explores every possible option. It does this by playing out all scenarios and giving each square a score. The score can be of 3 kinds, &lt;strong&gt;positive for a win, 0 for a draw and negative for a loss&lt;/strong&gt;. At the end, you pick the highest score and play that move.&lt;/p&gt;

&lt;p&gt;I won’t go into much detail as to how the recursion works, as the two sources above can do a much better job at explaining.&lt;/p&gt;

&lt;p&gt;But, I do want to mention a small optimization that I made to the algorithm. Since Minimax is a brute force algorithm, it is really slow. When I first wrote the function, it took a good 30 seconds to finish computing on an empty board, and this was running locally on node. No doubt this was gonna crash my browser.&lt;/p&gt;

&lt;p&gt;To see this, think about the tree,&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;First choice,                  (9 options)
                            |         | | | | | | | | 
Second choice,         (8 options)      ...
                     |        | | | | | | | 
Third choice,   (7 options)             ...     
                  |     | | | | | | 
		...       ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If the computer runs the algorithm from the beginning, it first has 9 options and each one of these expand into a tree that each have 8 options each, subsequently these 8 nodes each expand into 7 trees of their own. Try to draw it, to get a feel for the sheer magnitude of the tree.&lt;/p&gt;

&lt;h2 id=&quot;first-move-doesnt-help&quot;&gt;First move doesn’t help&lt;/h2&gt;

&lt;p&gt;Running the algorithm on an empty board returns a score of &lt;strong&gt;0 for each of the squares&lt;/strong&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; | |    | |X    | |X
-----  -----   -----
 | |    | |     |O|
-----  -----   -----
 | |    | |     | |
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Say the AI plays a corner, it then runs the algorithm and finds that the center is the only safe move so it plays that and eventually brings the game to a draw. It does this for each of the other 9 squares. No matter where the first move is placed, the second player can always tie the game. Thus, the zero scores for all 9 squares.&lt;/p&gt;

&lt;h2 id=&quot;optimizing-minimax&quot;&gt;Optimizing Minimax&lt;/h2&gt;

&lt;p&gt;As explained, the first computation is completely unnecessary as there’s no go-to move that will guarantee a win and as explained it is very expensive. And so to save some computation time, I optimized for the first and second move, if the AI has the first move, it either plays it in one of the corners or the center. Given the first move, you can actually play anywhere and tie all the time but if you play a corner or the center and the opponent (you) goof up, you’ll end up losing. As for the second move, I made it so that it captures either the center or a corner if the center is taken since these two spots will prevent the other from winning.&lt;/p&gt;

&lt;p&gt;Getting the first or second move fast makes the tree start from the node with 7 options. Thankfully, the browser seemed to be able to handle this computation just fine.&lt;/p&gt;

&lt;h2 id=&quot;putting-it-all-together&quot;&gt;Putting it all together&lt;/h2&gt;

&lt;p&gt;After creating this function, I just had to add it to my component. This was easy enough to do.&lt;/p&gt;

&lt;p data-height=&quot;553&quot; data-theme-id=&quot;0&quot; data-slug-hash=&quot;MbVXLv&quot; data-default-tab=&quot;result&quot; data-user=&quot;danielcodes&quot; data-embed-version=&quot;2&quot; data-pen-title=&quot;Tic Tac Toe&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;http://codepen.io/danielcodes/pen/MbVXLv/&quot;&gt;Tic Tac Toe&lt;/a&gt; by Daniel Chia (&lt;a href=&quot;http://codepen.io/danielcodes&quot;&gt;@danielcodes&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://production-assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;This was the end result, now the final step was to style it up.&lt;/p&gt;

&lt;h2 id=&quot;final-touches&quot;&gt;Final touches&lt;/h2&gt;

&lt;p&gt;Phew, most of the logic had been wrapped up at this point, now the task was to make it appealing to users.
Right from the get-go I thought of using a modal to first prompt the user for input, select an icon (X or O) and who goes first. Then, start the game and reset back to the modal when the game finished.&lt;/p&gt;

&lt;p&gt;But I had no idea how to implement this modal. Thankfully, I found this &lt;a href=&quot;https://daveceddia.com/open-modal-in-react/&quot;&gt;tutorial&lt;/a&gt;, that had just what I needed.
After adding some color, and rewiring things here and there, this was the end result.&lt;/p&gt;

&lt;p data-height=&quot;573&quot; data-theme-id=&quot;0&quot; data-slug-hash=&quot;qqzbyd&quot; data-default-tab=&quot;result&quot; data-user=&quot;danielcodes&quot; data-embed-version=&quot;2&quot; data-pen-title=&quot;Tic Tac Toe&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;http://codepen.io/danielcodes/pen/qqzbyd/&quot;&gt;Tic Tac Toe&lt;/a&gt; by Daniel Chia (&lt;a href=&quot;http://codepen.io/danielcodes&quot;&gt;@danielcodes&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://production-assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;It was a fun project overall. It definitely tested my patience, from not knowing how to break down the big grid, having to learn about a new algorithm and creating the user interface. It was a great reminder that projects take time and that small victories count as the final product is always worth seeing.&lt;/p&gt;

&lt;p&gt;And that’s a wrap :)&lt;/p&gt;

&lt;p&gt;PS. Since this was done in a CodePen, I ended up with 400 lines of JS. Time to move this locally and give the project some structure.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Thoughts on hackathons</title>
   <link href="http://danielcodes.github.io/2016/04/04/thoughts-on-hackathons/"/>
   <updated>2016-04-04T00:00:00-04:00</updated>
   <id>http://danielcodes.github.io/2016/04/04/thoughts-on-hackathons</id>
   <content type="html">&lt;p&gt;This weekend I had the pleasure of attending my second hackathon, HackNY Spring 2016. The first one I attended was in the summer, AngelHack Brooklyn 2015. This time around, things were a bit tougher, it wasn’t all smooth sailing and I just want to write about things that I could have done better in terms of preparation and on-site.&lt;/p&gt;

&lt;h3 id=&quot;decide-on-a-goal&quot;&gt;Decide on a goal&lt;/h3&gt;

&lt;p&gt;Hackathons have prizes, these come in two kinds, specific categories (design, technical, etc) and technology specific (companies want you to use their API’s). Before entering the hackathon, you should have made up your mind as to what your target is. Of course, this also implies that you must have an idea that you want to work on. This was my team’s biggest setback during the hackathon, we did not have a concrete idea to work with and were pivoting from time to time resulting lots of wasted time and energy that could have been better used for development.&lt;/p&gt;

&lt;h3 id=&quot;try-to-sleep&quot;&gt;Try to sleep?&lt;/h3&gt;

&lt;p&gt;I believe that I only got about 40 minutes of sleep that night. These 24-hour hackathons encourage you to code through the night and you probably will since you want to win (duh) are pretty damn exhausting. In fact, I was dozing off near the end of the demos. Once I got home, I could not wait to close my eyes and just get some rest. I crashed from 7 PM to 8 AM the next day. Be aware that hackathons do have a high burnout rate. Though I guess it’s ok, since it is a once in a while thing.&lt;/p&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;This hackathon was specially tough since my team had gone in with the goal to win (what team doesn’t) but came up short. The biggest downfall was being prize-driven and trying to create an idea out of a narrow set of contraints (API’s) rather than letting an idea open up our creativity.&lt;/p&gt;

&lt;p&gt;PS. Despite the negative tone, hackathons are hella fun and you should try them out if you get the chance :)&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>On typing</title>
   <link href="http://danielcodes.github.io/2016/03/29/on-typing/"/>
   <updated>2016-03-29T00:00:00-04:00</updated>
   <id>http://danielcodes.github.io/2016/03/29/on-typing</id>
   <content type="html">&lt;h2 id=&quot;humble-beginnings&quot;&gt;Humble beginnings&lt;/h2&gt;

&lt;p&gt;I &lt;em&gt;first learned to type&lt;/em&gt; and then learned to program. I remember when I was still in High School a couple years back (wow, more than 5!) whenever I had the need to type papers or anything on the computer, I would type.. like a noob. I did a bit better than hunt and peck as I used more than just my index fingers to type but I was still heavily inefficient. And so I decided to change things, there had to be a &lt;em&gt;correct way to type&lt;/em&gt;, and there was, it is called &lt;strong&gt;touch typing&lt;/strong&gt;. &lt;a href=&quot;https://en.wikipedia.org/wiki/Touch_typing&quot;&gt;Touch typing&lt;/a&gt; is the ability to type using all ten fingers without looking at the keyboard. When I first read about it, I was pretty amazed, and I would have quickly jumped into learning this new skill. Except that I didn’t, I had a decision to make between keyboard layouts, QWERTY or Dvorak.&lt;/p&gt;

&lt;h2 id=&quot;introducing-dvorak&quot;&gt;Introducing Dvorak&lt;/h2&gt;

&lt;p&gt;Around this same time, I was into cubing (only 3x3). I followed this guy, Shotaro Makisumi, who had set various records. In his website, he had a section on &lt;a href=&quot;https://en.wikipedia.org/wiki/Dvorak_Simplified_Keyboard&quot;&gt;Dvorak&lt;/a&gt;. Dvorak is a different keyboard layout made for comfortable typing in the English language. Here I was, having just found out about this magical keyboard layout and on my quest to learn to touch type. Coincidence? I think not. So began my this little adventure. It was a very frustrating experience at first. I was not a touch typer and learning a keystroke at a time really tested my patience. However, once I had learned the home row keys (10 keys), things started to get fun! In Dvorak, all the consonants are placed on your left hand side, so lots of words are readily available without lifting a finger unlike it’s counterpart QWERTY. After about a month or so of practicing (yeah, I took my time), I was finally able to touch type in Dvorak! It was an amazing feeling, it still is an amazing feeling everyday I get to type in this beautifully laid out set of letters. My words-per-minute (WPM) also skyrocketed from about 35-40 to about 60 (I type at about 70 - 80 WPM now). It was pretty life changing. I mean let’s face it, the past couple of years has been a lot of staring at the computer and a lot of typing.&lt;/p&gt;

&lt;h2 id=&quot;qwerty-again&quot;&gt;QWERTY again&lt;/h2&gt;

&lt;p&gt;Funny enough, I thought that once I had learned Dvorak, I would never have to touch QWERTY again. &lt;strong&gt;WRONG&lt;/strong&gt;. The only time I could type in Dvorak, was at home. This left me largely dependent on computer usage at school. I postponed this as much as possible but once I found out I would need to program for an exam in a QWERTY keyboard, I was finally forced to learn QWERTY. Although I had been spoiled by the Dvorak keyboard, learning to touch type QWERTY wasn’t all that bad. I was familiar with the procedure, more patient and managed to complete the task in about 2 - 3 weeks with daily practice. This turned out benefitial in the long run, with my efficiency no longer bound to using my personal computer.&lt;/p&gt;

&lt;h2 id=&quot;why-you-should-learn-to-touch-type&quot;&gt;Why you should learn to touch type&lt;/h2&gt;

&lt;p&gt;Now &lt;em&gt;drumroll please&lt;/em&gt;, why you should learn to touch type? Well, if you’re like me and you use your computer on a daily basis it is well worth the investment to learn to type properly. You won’t dread computer tasks anymore, and actually have an enjoyable experience. So whether it’d be Dvorak which I highly recommend or QWERTY, invest the time to learn this ubiquitous skill. It will take time, it will be challenging, but very well worth it at the end!&lt;/p&gt;

&lt;p&gt;PS. Here a screenshot of my favorite typing game, &lt;a href=&quot;https://www.keyhero.com/&quot;&gt;KeyHero&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/key_hero.png&quot; alt=&quot;Key Hero&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;references&quot;&gt;References&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Typing#Hunt_and_peck&quot;&gt;Hunt and peck&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://makisumi.com/dvorak/&quot;&gt;Dvorak first encounter&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://learn.dvorak.nl/&quot;&gt;Dvorak training&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</content>
 </entry>
 
 <entry>
   <title>Playing with GET/POST on Flask</title>
   <link href="http://danielcodes.github.io/2016/02/15/get-and-post-on-flask/"/>
   <updated>2016-02-15T00:00:00-05:00</updated>
   <id>http://danielcodes.github.io/2016/02/15/get-and-post-on-flask</id>
   <content type="html">&lt;p&gt;I signed up to give a web development workshop for my school’s ACM club. Beginning with the basics HTML/CSS to creating a small application with Flask. Planning this has been a little tougher than expected as to what I want people to come out the workshop knowing. Of course, the musts are the &lt;strong&gt;main three elements&lt;/strong&gt; that go into a web framework:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;URL handling&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Templating&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Object Relational Mapper (ORM)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With Flask, one and two are simple, the third one is a little trickier as an extension is needed. After going through the quickstart tutorial for &lt;strong&gt;Flask-sqlalchemy&lt;/strong&gt;, I was confident that I’d be able to produce some useful &lt;strong&gt;GET/POST&lt;/strong&gt; examples. What I found was that these methods could be used interchangeably and abused. Here’s why:&lt;/p&gt;

&lt;h3 id=&quot;the-get-method&quot;&gt;The GET method&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;GET&lt;/strong&gt; is the default http method when accessing a page, you’re retrieving a page.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;GET&lt;/code&gt; can be passed arguments by a form or by a query string in the URL.&lt;/p&gt;

&lt;h4 id=&quot;get-form&quot;&gt;GET Form&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;form action=&quot;/get_something&quot; method=&quot;GET&quot;&amp;gt;
	&amp;lt;input type=&quot;text&quot; name=&quot;name&quot; &amp;gt;
	&amp;lt;input type=&quot;text&quot; name=&quot;job&quot; &amp;gt;
	&amp;lt;input type=&quot;submit&quot; value=&quot;Add Person&quot;&amp;gt;
&amp;lt;/form&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;get-query-string&quot;&gt;GET Query string&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;http://arandomurl.com/get_something?name=daniel&amp;amp;job=student
the ? is followed by key=value pairs tied together with an &amp;amp;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;These are the two ways to pass arguments to a GET request, the way to retrieve them on Flask is by accessing the &lt;code&gt;args&lt;/code&gt; attribute, which returns a dictionary, containing the the key-value pairs passed. In this case, name and job.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#a dict
#check out the reference below for more on python dictionaries
arguments = request.args

#a specific argument 
name = request.args.get(&#39;name&#39;) 
#or
name = request.args[&#39;name&#39;]

#Note: if argument is not there, get returns None, access with brackets gives a KeyError
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;the-post-method&quot;&gt;The POST method&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;POST&lt;/strong&gt; is the http method used when you want to alter the application.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;ie. creating a new account, saving records to a database.&lt;/p&gt;

&lt;h4 id=&quot;post-form&quot;&gt;POST Form&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;form action=&quot;/post_something&quot; method=&quot;POST&quot;&amp;gt;
	&amp;lt;input type=&quot;text&quot; name=&quot;name&quot; &amp;gt;
	&amp;lt;input type=&quot;text&quot; name=&quot;job&quot; &amp;gt;
	&amp;lt;input type=&quot;submit&quot; value=&quot;Add Person&quot;&amp;gt;
&amp;lt;/form&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When this form is submitted, the following passed arguments, name and job can be accessed in the following manner:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#a dict
arguments = request.form

#a specific argument 
name = request.form.get(&#39;name&#39;)
#or
name = request.form[&#39;name&#39;]

#Note: if argument is not there, get returns None, access with brackets gives a KeyError
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;abusing-getpost&quot;&gt;Abusing GET/POST&lt;/h3&gt;
&lt;p&gt;So far, I’ve shown that both &lt;strong&gt;GET&lt;/strong&gt; and &lt;strong&gt;POST&lt;/strong&gt; can take arguments in pretty much the same manner. Difference is that one receives it in &lt;code&gt;args&lt;/code&gt; while the other in &lt;code&gt;form&lt;/code&gt;. In Flask, it looks a little like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@app.route(&#39;/&amp;lt;some-url&amp;gt;&#39;, methods=[&#39;GET&#39;, &#39;POST&#39;])
def some_view():
	#depending on what method you used to pass arguments
	#retrieve them from args or form and do something

    return &amp;lt;some_html&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;Since you can pass arguments to either method, they can be used interchangeably and therefore abused. To prevent this, &lt;strong&gt;be informed&lt;/strong&gt; as to what GET and POST are. GET should only retrieves information, while POST is used to create new information.&lt;/p&gt;

&lt;h3 id=&quot;references&quot;&gt;References&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.jeffknupp.com/blog/2015/08/30/python-dictionaries/&quot;&gt;Python Dictionaries&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.jeffknupp.com/blog/2014/03/03/what-is-a-web-framework/&quot;&gt;What is a web framework?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://flask-sqlalchemy.pocoo.org/2.1/quickstart/&quot;&gt;Flask-sqlalchemy&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>Set your Disqus configuration variables</title>
   <link href="http://danielcodes.github.io/2016/02/03/disqus-variables/"/>
   <updated>2016-02-03T00:00:00-05:00</updated>
   <id>http://danielcodes.github.io/2016/02/03/disqus-variables</id>
   <content type="html">&lt;p&gt;After deciding on the theme that I wanted to use for this site, &lt;a href=&quot;https://github.com/poole/hyde&quot;&gt;Hyde&lt;/a&gt;. I was also actively looking for ways to improve my site. I found this really helpful &lt;a href=&quot;http://joshualande.com/jekyll-github-pages-poole/&quot;&gt;article&lt;/a&gt;, which helped me add an &lt;strong&gt;Archive&lt;/strong&gt; to see my posts in log format, &lt;strong&gt;Analytics&lt;/strong&gt; to track views and &lt;strong&gt;Comments&lt;/strong&gt; for feedback. After going through the steps, everything was well set up, or so I thought. When setting up Disqus comments, I placed the provided markup on my page but neglected to fill in the variables that they had &lt;strong&gt;strongly&lt;/strong&gt; suggested me to replace.&lt;/p&gt;

&lt;h3 id=&quot;the-variables-url-and-identifier&quot;&gt;The variables, url and identifier&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;var disqus_config = function () {
	// Replace PAGE_URL with your page&#39;s canonical URL variable
	this.page.url = PAGE_URL;

	// Replace PAGE_IDENTIFIER with your page&#39;s unique identifier variable
	this.page.identifier = PAGE_IDENTIFIER;  
};
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;where-i-goofed-up&quot;&gt;Where I goofed up&lt;/h3&gt;

&lt;p&gt;The way Disqus works is by keying a provided URL, defined by a url variable. As you can tell, I did not define this URL and when I received the first comment on my page, sometimes it showed up and sometimes it didn’t. The problem was how the page was being accessed, by that I mean the protocol used. Disqus was creating two different comment threads for &lt;code&gt;http://&lt;/code&gt; and &lt;code&gt;https://&lt;/code&gt;. And so, I got annoyed and had to fix the problem.&lt;/p&gt;

&lt;p&gt;I headed over to the documentation and found that I needed to provide an absolute url, and the slug part of the url that comes after the domain name.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//ie. example url and identifier
var this.page.url = &quot;http://danielcodes.github.io/2016/01/12/resuming-python/&quot;
var this.page.identifier = &quot;/2016/01/12/resuming-python/&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The way to obtain these variables with Jekyll is:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
// Replace PAGE_URL with your page&#39;s canonical URL variable
var this.page.url = &quot;{{site.url}}{{page.url}}&quot;;

// Replace PAGE_IDENTIFIER with your page&#39;s unique identifier variable
var this.page.identifier = &quot;{{page.url}}&quot;;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The beginning part, &lt;code&gt;site.url&lt;/code&gt; has to be defined in your &lt;code&gt;_config.yml&lt;/code&gt;, check mine &lt;a href=&quot;https://github.com/danielcodes/danielcodes.github.io/blob/master/_config.yml&quot;&gt;here&lt;/a&gt;. This is followed by, &lt;code&gt;page.url&lt;/code&gt;, which will look for the route of your blog post.&lt;/p&gt;

&lt;p&gt;That’s pretty much it, define your javascript cofiguration variables and avoid the split threads.
And don’t forget to test things out first!&lt;/p&gt;

&lt;h3 id=&quot;references&quot;&gt;References&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://help.disqus.com/customer/en/portal/articles/2158629&quot;&gt;Avoiding split threads and missing comments&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://help.disqus.com/customer/en/portal/articles/472098-javascript-configuration-variables&quot;&gt;Javascript configuration variables&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</content>
 </entry>
 
 <entry>
   <title>Adding minimal social media icons</title>
   <link href="http://danielcodes.github.io/2016/01/30/adding-minimal-icons/"/>
   <updated>2016-01-30T00:00:00-05:00</updated>
   <id>http://danielcodes.github.io/2016/01/30/adding-minimal-icons</id>
   <content type="html">&lt;p&gt;I set out to add a list of social media icons this past week, I had been postponing the task for a while now and finally got around doing it. It shouldn’t have been hard, find icon images and link them up, right? Well.. things didn’t go so smoothly for me. Actually, it did work, but there was a pesky little aesthetic detail that drove me a bit crazy.&lt;/p&gt;

&lt;p&gt;I decided to use &lt;a href=&quot;https://fortawesome.github.io/Font-Awesome/&quot;&gt;Font Awesome&lt;/a&gt; for the icons, from its vast collection of icons, I only needed 4. But who knows later on I might create other profiles that might require them, it’s nice to have options.&lt;/p&gt;

&lt;p&gt;I chose to be lazy and simply added the provided CDN to my site:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;link rel=&quot;stylesheet&quot; href=&quot;https://maxcdn.bootstrapcdn.com/font-awesome/4.5.0/css/font-awesome.min.css&quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With that in place, icon insertion is just a matter of placing &lt;code&gt;&amp;lt;i&amp;gt;&lt;/code&gt; tags, selecting the ones you want through a class:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;i class=&quot;fa fa-github&quot;&amp;gt;&amp;lt;/i&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So I had the icons, the only extra thing that I did was wrap these tags with &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; tags to link them to my profiles. Check it out in the JSFiddle below:&lt;/p&gt;

&lt;iframe width=&quot;100%&quot; height=&quot;200&quot; src=&quot;//jsfiddle.net/m2s2qshm/3/embedded/html,result/&quot; allowfullscreen=&quot;allowfullscreen&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;

&lt;h3 id=&quot;the-problem&quot;&gt;The Problem&lt;/h3&gt;

&lt;p&gt;At this point, I had something working, icons and their respective links. Now, if you look at the result tab in the fiddle, you’ll see that the first three icons have some type of dash shadow at the bottom. Whenever I’d hover over these icons, the shadow would show. I can only assume that it has to do with links themselves, similar to how hovering over text links makes them darker and underlined.&lt;/p&gt;

&lt;p&gt;I looked at other tutorials and it turned out that they placed all the links in a &lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt; tag. I proceded to play around with things, but it must of not been my day as it did not work. I was pretty close to giving up on the issue altogether.&lt;/p&gt;

&lt;h3 id=&quot;solution&quot;&gt;Solution&lt;/h3&gt;

&lt;p&gt;Today, out of curiosity I looked over a repository that a friend starred on GitHub. I visited the &lt;a href=&quot;https://nusmods.com/timetable/2015-2016/sem2&quot;&gt;website&lt;/a&gt; and saw that they had the icons I wanted. I decided to give it one last ditch effort. I opened up Developer Tools and proceeded to look at the markup. I saw that the site used a &lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt; tag, and I wondered,&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Why the heck didn’t it work the other time?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Whatever the case may be. I proceeded to wrap the links in &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; tags and the whole thing in a &lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt; tag.&lt;/p&gt;

&lt;p&gt;Only two things remained to be done, remove the bullet points from the list and place the elements inline, done with the following bit of CSS:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/*targetting the &amp;lt;ul&amp;gt; with social-icons class*/
.social-icons { list-style: none; }
.social-icons li { display: inline-block; }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here’s the final result:&lt;/p&gt;

&lt;iframe width=&quot;100%&quot; height=&quot;150&quot; src=&quot;//jsfiddle.net/kn3y78gz/2/embedded/result/&quot; allowfullscreen=&quot;allowfullscreen&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;No more annoying little dashes at the bottom, good grief.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Thinkpad saves the day</title>
   <link href="http://danielcodes.github.io/2016/01/02/my-setup/"/>
   <updated>2016-01-02T00:00:00-05:00</updated>
   <id>http://danielcodes.github.io/2016/01/02/my-setup</id>
   <content type="html">&lt;p&gt;The first laptop I bought, a &lt;a href=&quot;http://www.cnet.com/products/lenovo-y40-70-laptop-59423030-black-doorbuster-4th-generation-intel-core-i7-4510u-2-00ghz-1600-mhz-4mb/specs/&quot;&gt;Lenovo Y40&lt;/a&gt;, turned out to be horrible disappointment. From a keyboard that I didn’t like, a screen resolution that sucked and to top things off the battery died on me after 5 months of usage. It didn’t completely die on me, but the darn machine would not work unless it was plugged in. Rendering my laptop’s portability useless, as everytime I’d need ot use it, boot up was necessary. I sent in the laptop since it was still under warranty but I was still in need of a laptop for my coding needs as school was already in session.&lt;/p&gt;

&lt;p&gt;I first resorted to borrowing a friend’s tiny notebook. It was a really tiny machine with Ubuntu on it, ultimately the laptop’s keyboard was too small and the fan noise was irritable enough to keep me from using it. But I’d found something cool, that Linux could run on machines with minimal specs!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/laptop/screen.jpg&quot; alt=&quot;Screen&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I started looking around for cheap computer options, and eventually after much fishing, chose to buy a used ThinkPad T420. You can find these &lt;a href=&quot;http://www.ebay.com/sch/i.html?_from=R40&amp;amp;_trksid=p2050601.m570.l1311.R1.TR12.TRC2.A0.H0.Xthinkpad+t.TRS0&amp;amp;_nkw=thinkpad+t420&amp;amp;_sacat=0&quot;&gt;under 200 on ebay&lt;/a&gt;. I coughed up a tiny bit more to get one that wasn’t too beat up. The specs were decent, i5, 250GB storage and 4GB RAM, more than enough for any Linux OS. After receiving the computer, I instantly liked it a lot more than the being-repaired Y40. The screen was still mediocre but the keyboard made a world’s difference. One thing that I can’t stand is having a shortened right SHIFT key. Exactly what the Y40 had, and to add onto the bad design, the keys had the depth of about a nanometer. This ThinkPad had the old school IBM keyboards, it felt clicky, and the right SHIFT was not shortened. The only downside is that, it is literally a brick to carry around.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/laptop/keyboard.jpg&quot; alt=&quot;Keyboard&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Soon after, a friend helped me install Linux on it, specifically &lt;a href=&quot;https://ubuntugnome.org/&quot;&gt;Ubuntu-GNOME&lt;/a&gt;. It felt good to finally work in this OS after many failed attempts to get it on VirtualBox. Not that I failed, the VM’s ran so slow (2 - 3 second delays), that it was pretty unbearable so I gave up on it. Then I found about Vagrant + Cygwin, which initially cost me a lot of grief (it lost my VM at some point). But I did have Linux-y tools for a brief period of time (troubled times with symlinks and shared folders).&lt;/p&gt;

&lt;p&gt;I really can’t emphasize how good it is once you make the switch to a Linux OS. I’m being biased here, as I’ve always wanted this environment where I can just do all my work in a terminal. But if you’re a developer or an aspiring programmer, definitely try it out this set up if you have 200 bucks to spare.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;TL;DR&lt;/strong&gt; Don’t be fooled by a laptop’s specs. If you just want to program, buy a cheap Thinkpad and throw Linux on it. Or get a Mac if you can afford it.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/laptop/cover.jpg&quot; alt=&quot;Cover&quot; /&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>An unhealthy amount of screen time</title>
   <link href="http://danielcodes.github.io/2015/12/25/screen-time/"/>
   <updated>2015-12-25T00:00:00-05:00</updated>
   <id>http://danielcodes.github.io/2015/12/25/screen-time</id>
   <content type="html">&lt;p&gt;It’s Christmas morning, so Merry Christmas!&lt;/p&gt;

&lt;p&gt;Today I want to share my insight on eye strain. I fully knew this, that before committing myself to become a software developer, that I’d have to spend endless time in front of computer. Although I’ve been trying methods here and there to manage this unhealthy, almost unavoidable habit, I always seem to break right back in. The bad habit is to sit in front of a computer for a solid 2-3 hours. This adds up if it’s happening on a daily basis (which it is).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/eye_strain.jpg&quot; alt=&quot;Patrick&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I’ve always had the thought of eye health in the back of my mind, but it wasn’t until recently that it hit me, with a vengeance. Of course, it happened during finals week. For the past week, I’ve spent an insane amonut of time in front of the screen. I was mildly aware until I took a look in the mirror and saw how bad my eyes looked, they were bloodshot. I looked like Patrick. To make things worse, I started rubbing them and this is a no-no since it’ll make it itch more and thus continue the vicious cycle. Since the semester is over, and I didn’t feel like kicking back and rather learn all of the things that I’ve been wanting to learn. This led to more computer time, so the eye strain symptoms have started again.&lt;/p&gt;

&lt;p&gt;This is a serious problem, if my eyes are bad how am I supposed write code? From now on, I’ll be prioritizing my eye health. My plan is to have 1 hour bursts of productivity and then taking 10-15 minute breaks.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>On using Tmux</title>
   <link href="http://danielcodes.github.io/2015/12/16/tmux-setup/"/>
   <updated>2015-12-16T00:00:00-05:00</updated>
   <id>http://danielcodes.github.io/2015/12/16/tmux-setup</id>
   <content type="html">&lt;h4 id=&quot;update&quot;&gt;Update&lt;/h4&gt;

&lt;h6 id=&quot;scrollbar-locked-when-using-tmux&quot;&gt;01/12/16 - Scrollbar locked when using tmux&lt;/h6&gt;

&lt;hr /&gt;

&lt;p&gt;I’ve been wanting to write this one for a while now. This summer, I got learn two very exciting tools, &lt;strong&gt;Vim&lt;/strong&gt; an &lt;strong&gt;Tmux&lt;/strong&gt;. These two are a must-have for any terminal junkie and together they’ve taken my workflow to a whole new level. Although tmux has some extended functionality, in this post I am going to focus on how I personally use it. Also, I am going to assume that you’ve installed the tool on your machine and know how to fire it up. Ok, onto the big question, what do you customize?&lt;/p&gt;

&lt;h3 id=&quot;changing-the-prefix&quot;&gt;Changing the prefix&lt;/h3&gt;

&lt;p&gt;The first thing you ought to do is change the pesky default prefix mapping, &lt;strong&gt;CTRL+b&lt;/strong&gt;. To do this, first create your &lt;strong&gt;~/.tmux.conf&lt;/strong&gt; file, this file allows you to configure tmux settings to your liking. In there, add:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;#prefix to ctrl+a
unbind C-b
set -g prefix C-a 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;However, your pinky finger still has to travel a mile to get to that CTRL key at the bottom left. To fix this, I’d recommend looking into your system and changing the &lt;strong&gt;Caps Lock&lt;/strong&gt; key mapping to &lt;strong&gt;CTRL&lt;/strong&gt;. I have Ubuntu-Gnome, and it came with a nice little piece of software called Tweak Tool, here I was able to turn my Caps Lock key into CTRL.&lt;/p&gt;

&lt;h3 id=&quot;refreshing-the-tmuxconf-file&quot;&gt;Refreshing the .tmux.conf file&lt;/h3&gt;
&lt;p&gt;Next, you gotta know how to refresh these updates that you’re adding. Usually, it is done by CTRL+a followed by :, then on the prompt you type,&lt;/p&gt;

&lt;p&gt;&lt;code&gt;:source-file ~/.tmux.conf&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;but this is cumbersome and hard to remember, instead add:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;#reload of the config file
unbind r
bind r source-file ~/.tmux.conf
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;this will allow you to refresh with CTRL+a + r.&lt;/p&gt;

&lt;p&gt;You can test this by changing window tab colors on the status bar, add,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;#highlight current window
set-window-option -g window-status-current-bg white 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;try out different colors and refresh with CTRL+a + r.&lt;/p&gt;

&lt;h3 id=&quot;pane-splitting&quot;&gt;Pane Splitting&lt;/h3&gt;

&lt;p&gt;Now that we have much nicer prefix &lt;strong&gt;CTRL+a&lt;/strong&gt;, what comes next is pane splitting. The defaults are set to “ (vertical) and % (horizontal). These bindings are hard to memorize and not so intuitive, let’s change them. In your &lt;em&gt;.tmux.conf&lt;/em&gt; add:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;#intuitive pane splitting
bind | split-window -h -c &quot;#{pane_current_path}&quot;
bind - split-window -v -c &quot;#{pane_current_path}&quot;
unbind &#39;&quot;&#39;
unbind %
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The first line is saying to use the &lt;code&gt;|&lt;/code&gt; key to do a horizontal split. The &lt;code&gt;-c &quot;#{pane_current_path}&quot;&lt;/code&gt; part makes it so that the split pane remains in the current path where you split from. Imagine being into directory that’s 10 levels down, and having to cd there again when you create a new pane. You get the picture.&lt;/p&gt;

&lt;h3 id=&quot;moving-between-panes&quot;&gt;Moving between panes&lt;/h3&gt;
&lt;p&gt;By now, you can split panes, but how do you move aronud? One way to go about it, is to hit the prefix key followed by an arrow key movement. This is sloppy though, as you have to move your hand down to the arrow keys. A better way is the following, add:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;#quick pane cycling, prefix + Ctrl-a 
unbind ^A
bind ^A select-pane -t :.+
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;with this, you can move from pane to pane by hitting your prefix twice.
If you mapped your control key to CAPS LOCK, you can hit the prefix once, keep your pinky on CAPS and press &lt;em&gt;a&lt;/em&gt; again. Ah, so, so, efficient.&lt;/p&gt;

&lt;p&gt;PS. I found this tip &lt;a href=&quot;https://robots.thoughtbot.com/a-tmux-crash-course&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If by any chance, a pane crashes on you, you can close it with &lt;strong&gt;prefix&lt;/strong&gt; + x.&lt;/p&gt;

&lt;h3 id=&quot;zooming-in&quot;&gt;Zooming in&lt;/h3&gt;
&lt;p&gt;One final feature that I want to talk about is zoom. Having multiple panes is great and all but truth is most of the time your focus is only one, the pane in which you’re writing code. Tmux has a neat little feature that helps with this problem, do &lt;strong&gt;CTRL+a + z&lt;/strong&gt;. This command, full screens the current pane, to exit, just use the same command.&lt;/p&gt;

&lt;h3 id=&quot;scrolling---updated-011216&quot;&gt;Scrolling - updated 01/12/16&lt;/h3&gt;
&lt;p&gt;I noticed a small issue with Tmux when I first started using it. It locked up my scrollbar. At first I didn’t think much of the issue. But ever since failing tests started giving error messages that cover the screen and more, it has become imperative for me to get this functionality back. This is solved with the following lines:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;#allows scrolling
setw -g mode-mouse on
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;TL;DL My .tmux.conf is &lt;a href=&quot;https://gist.github.com/danielcodes/ea6ee30d2ff032421b2e&quot;&gt;here&lt;/a&gt;. Leave me a comment if I can improve on anything.&lt;/p&gt;

&lt;p&gt;Hope you found these helpful, and happy tmuxing !&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Leadership is hard</title>
   <link href="http://danielcodes.github.io/2015/12/03/leadership/"/>
   <updated>2015-12-03T00:00:00-05:00</updated>
   <id>http://danielcodes.github.io/2015/12/03/leadership</id>
   <content type="html">&lt;p&gt;This semester I had to partake in 2 group projects. Both of which I ended up taking leadership roles in, AKA Project Management. Up until now, other than writing I haven’t really collaborated much on any other type of project. For this 2 projects, one of them involved mostly writing and the second was software collaboration. I can’t say that it has been easy nor I’ve done a great job at it, all I can say is that is tough and much improvement is needed.&lt;/p&gt;

&lt;p&gt;It’s tough because being a leader means that you have to lead by example. What do I mean? If the leader (me) works hard, the rest of the group will follow right? This doesn’t necessarily work all the time as some people tend to take advantage and decide to not contribute at all, knowing that you’ll be there to pick up the slack. But I might’ve missed something here, besides showing yourself as capable. That isn’t enough, you have to delegate tasks. These are the kind of people that won’t do work unless you nudge them too. Yeah, it’s extremely annoying. But to save yourself some grief and avoid overworking yourself, you have to be assertive and demand work from others as it is their responsibility just as much as it is yours.&lt;/p&gt;

&lt;p&gt;Other things that I’ve noticed are that as a leader, you need to provide a sense of direction. This is very important if you have very passive team members whom will solely rely on you to provide them with work to do. If it was up to me, I’d take initiative and start improvising things on my own. Sadly, not everyone shares the same mindset. You’re stunt when somebody asks, “what do I do?”. And even after you feel that you have a grasp on direction, an open mind is necessary because feedback is extremely important as the project develops. Your teammates might notice something amiss, and you have to take that into account and not ignore them, like I’ve done.&lt;/p&gt;

&lt;p&gt;It has been a tough experience, and one that isn’t totally over. As bad as it sounds, I still believe that I’m capable of leadership and it is just something that I need to keep working on. I gotta take in everything calmly and not just rage when everything goes wrong and out of place.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Being dumb, painful Jekyll setup</title>
   <link href="http://danielcodes.github.io/2015/11/27/being-dumb/"/>
   <updated>2015-11-27T00:00:00-05:00</updated>
   <id>http://danielcodes.github.io/2015/11/27/being-dumb</id>
   <content type="html">&lt;p&gt;Incredibly annoyed that it took me so long to set things up with jekyll here.
I began customization through the index page, making edits to the html and every darn time I restarted the server, the changes would never go through. It was by chance that I decided to mess with the &lt;strong&gt;_config.yml&lt;/strong&gt; file and found that some parameters defined here were being passed to the index. This meant that no matter how many times I changed the html itself, it would just get replaced, every single time. I stupidly googled “jekyll not saving changes” too. All I can say is…&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/facepalm.jpg&quot; alt=&quot;Facepalm&quot; /&gt;&lt;/p&gt;
</content>
 </entry>
 

</feed>
